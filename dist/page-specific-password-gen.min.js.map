{"version":3,"sources":["sjcl.js","crypt/hex2base64.js","crypt/pbkdf2.js","crypt/sha1.js","password_lib.js"],"names":["t","a","b","c","length","sjcl","exception","invalid","d","e","f","g","h","k","l","m","n","p","r","s","q","v","w","x","u","F","A","random","K","hasOwnProperty","push","C","window","performance","now","addEntropy","Date","valueOf","y","z","concat","L","cipher","aes","encrypt","B","apply","arguments","hexToBase64","str","btoa","String","fromCharCode","replace","split","base64ToHex","i","bin","atob","hex","tmp","charCodeAt","toString","join","PBKDF2","password","salt","num_iterations","num_bytes","m_result_func","m_status_func","m_bpassword","rstr2binb","m_salt","m_total_iterations","m_iterations_in_chunk","m_iterations_done","m_key_length","m_hash","m_hash_length","m_total_blocks","Math","ceil","m_current_block","m_ipad","Array","m_opad","m_buffer","m_key","m_this_object","this","m_stopped","binb_sha1","chrsz","deriveKey","status_callback","result_callback","setTimeout","do_PBKDF2_iterations","iterations","salt_block","j","rstr2hex","binb2rstr","substr","stop","hex_sha1","rstr_sha1","str2rstr_utf8","b64_sha1","rstr2b64","any_sha1","rstr2any","hex_hmac_sha1","rstr_hmac_sha1","b64_hmac_sha1","any_hmac_sha1","sha1_vm_test","toLowerCase","key","data","bkey","ipad","opad","hash","input","hexcase","hex_tab","output","charAt","b64pad","tab","len","triplet","encoding","quotient","divisor","remainders","dividend","floor","full_length","log","str2rstr_utf16le","str2rstr_utf16be","olda","oldb","oldc","oldd","olde","bit_rol","safe_add","sha1_ft","sha1_kt","lsw","msw","num","cnt","mypbkdf2","passwordLib","calculatePasswordSjclPbkdf2","originalPassword","url","options","Promise","resolve","reject","intOptions","getDefaultOptions","attrname","verbose","console","trim","domain","getDomain","out","sha256","getBaseUrl","codec","fromBits","hmacSHA1","hasher","misc","hmac","sha1","passwordSalt","utf8String","toBits","derivedKey","pbkdf2","hexKey","calculatePasswordInternal","calculatePassword","intResultCallback","statusCallback","resultCallback","rejectCallback","base64","typeCount","smallLetters","capitalLetters","numbers","specialChars","prefix","newPassword","specialCharsListStart","specialCharList","smallLettersAdded","capitalLettersAdded","numbersAdded","specialCharsAdded","charAdded","curChar","charCode","substring","calculatePasswordOld","saltedPassword","moduloSpecialChars","moduloLargeChars","tempPassword","isNaN","parseInt","toUpperCase","character","randomHash","randomWords","parts","reverse","match","origUrl","parser","document","createElement","origUrlLower","href","host","indexOf","hostname","undefined","keyexchange","mode","corrupt","message","bug","notReady","O","slice","prototype","decrypt","bitArray","bitSlice","$","clamp","extract","getPartial","bitLength","partial","round","equal","pop","byteswapM","decodeURIComponent","escape","unescape","encodeURIComponent","base32","X","BITS","BASE","REMAINING","base32hex","base64url","reset","update","finalize","blockSize","Y","Uint32Array","subarray","splice","pow","ccm","name","G","listenProgress","unListenProgress","fa","V","tag","na","ocb2","S","pmac","gcm","ka","W","R","mac","aa","digest","prng","P","H","N","U","Z","o","ha","M","D","progress","seeded","ga","I","J","ca","T","da","ba","isReady","setDefaultParanoia","Object","call","max","getProgress","startCollectors","loadTimeCollector","ma","mouseCollector","oa","keyboardCollector","la","accelerometerCollector","ea","touchCollector","qa","addEventListener","attachEvent","stopCollectors","removeEventListener","detachEvent","clientX","offsetX","clientY","offsetY","touches","changedTouches","pageX","pageY","accelerationIncludingGravity","orientation","E","module","exports","require","randomBytes","Uint8Array","buffer","crypto","getRandomValues","msCrypto","json","defaults","iter","ks","ts","adata","ja","iv","cachedPbkdf2","ecc","elGamal","publicKey","kem","kemtag","ct","arrayBuffer","ArrayBuffer","encode","ia","secretKey","unkem","raw","decode","sa","ra","pa","firstSalt","define","tableStr","table","test","Error"],"mappings":"AAKA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,GAAA,IAAAD,EAAAE,OAAA,KAAA,IAAAC,MAAAC,UAAAC,QAAA,yBAAA,IAAAC,GAAAP,EAAAC,EAAAC,GAAAM,EAAAP,EAAA,GAAAM,EAAA,GAAAE,EAAAR,EAAAC,EAAA,EAAA,GAAAK,EAAA,GAAAG,EAAAT,EAAA,GAAAM,EAAA,EAAAN,GAAAA,EAAAC,EAAA,EAAA,GAAAK,EAAA,EAAA,IAAAI,GAAAC,EAAAC,EAAAC,EAAAC,EAAAR,EAAAJ,OAAA,EAAA,EAAAa,EAAA,EAAAC,GAAA,EAAA,EAAA,EAAA,EAAAN,GAAAX,EAAAkB,EAAAhB,GAAAF,EAAAW,EAAA,EAAA,IAAAQ,GAAAR,EAAA,GAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAC,EAAAD,IAAAH,EAAAX,EAAAQ,IAAA,IAAAW,EAAAV,GAAA,GAAA,KAAAW,EAAAV,GAAA,EAAA,KAAAW,EAAA,IAAApB,GAAAM,EAAAS,GAAAJ,EAAAZ,EAAAS,IAAA,IAAAU,EAAAT,GAAA,GAAA,KAAAU,EAAAnB,GAAA,EAAA,KAAAoB,EAAA,IAAAb,GAAAD,EAAAS,EAAA,GAAAH,EAAAb,EAAAU,IAAA,IAAAS,EAAAlB,GAAA,GAAA,KAAAmB,EAAAZ,GAAA,EAAA,KAAAa,EAAA,IAAAZ,GAAAF,EAAAS,EAAA,GAAAf,EAAAD,EAAAC,IAAA,IAAAkB,EAAAX,GAAA,GAAA,KAAAY,EAAAX,GAAA,EAAA,KAAAY,EAAA,IAAAX,GAAAH,EAAAS,EAAA,GAAAA,GAAA,EAAAR,EAAAG,EAAAF,EAAAG,EAAAF,EAAAG,CAAA,KAAAC,EACA,EAAA,EAAAA,EAAAA,IAAAG,EAAAf,EAAA,GAAAY,EAAAA,GAAAQ,EAAAd,IAAA,KAAA,GAAAc,EAAAb,GAAA,GAAA,MAAA,GAAAa,EAAAZ,GAAA,EAAA,MAAA,EAAAY,EAAA,IAAArB,GAAAM,EAAAS,KAAAL,EAAAH,EAAAA,EAAAC,EAAAA,EAAAC,EAAAA,EAAAT,EAAAA,EAAAU,CAAA,OAAAM,GAcA,QAAAM,GAAAvB,EAAAC,GAAA,GAAAC,GAAAK,EAAAC,EAAAC,EAAAT,EAAAwB,EAAAd,EAAAV,EAAAC,EAAAU,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAM,EAAAN,EAAA,GAAAK,EAAAL,EAAA,GAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,GAAAU,EAAAV,EAAA,EAAA,KAAAP,EAAA,EAAA,GAAAA,EAAAA,IAAA,GAAAA,EAAAK,EAAAN,EAAAC,IAAAK,EAAAN,EAAAC,EAAA,EAAA,IAAAM,EAAAP,EAAAC,EAAA,GAAA,IAAAK,EAAAN,EAAA,GAAAC,IAAAK,IAAA,EAAAA,IAAA,GAAAA,IAAA,EAAAA,GAAA,GAAAA,GAAA,KAAAC,IAAA,GAAAA,IAAA,GAAAA,IAAA,GAAAA,GAAA,GAAAA,GAAA,IAAAP,EAAA,GAAAC,GAAAD,EAAAC,EAAA,EAAA,IAAA,GAAAK,EAAAA,EAAAY,GAAAL,IAAA,EAAAA,IAAA,GAAAA,IAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAAAG,EAAAH,GAAAE,EAAAC,IAAAP,EAAAR,GAAAiB,EAAAF,EAAAA,EAAAD,EAAAA,EAAAF,EAAAA,EAAAC,EAAAR,EAAA,EAAAQ,EAAAF,EAAAA,EAAAD,EAAAA,EAAAD,EAAAA,EAAAJ,GAAAK,EAAAC,EAAAE,GAAAH,EAAAC,KAAAD,IAAA,EAAAA,IAAA,GAAAA,IAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,IAAA,CAAAH,GAAA,GAAAA,EAAA,GAAAE,EAAA,EAAAF,EAAA,GAAAA,EAAA,GAAAG,EAAA,EAAAH,EAAA,GAAAA,EAAA,GAAAI,EAAA,EAAAJ,EAAA,GAAAA,EAAA,GAAAM,EAAA,EAAAN,EAAA,GAAAA,EAAA,GAAAK,EAAA,EAAAL,EAAA,GAAAA,EAAA,GAAAO,EAAA,EAAAP,EAAA,GAAAA,EAAA,GAAAQ,EAAA,EAAAR,EAAA,GACAA,EAAA,GAAAU,EAAA,EA0BA,QAAAM,GAAAzB,EAAAC,GAAA,GAAAC,GAAAK,EAAAH,KAAAsB,OAAAC,EAAA3B,GAAAQ,IAAA,KAAAN,IAAAK,GAAAA,EAAAqB,eAAA1B,IAAAM,EAAAqB,KAAAtB,EAAAL,GAAA,KAAAA,EAAA,EAAAA,EAAAM,EAAAL,OAAAD,IAAAM,EAAAN,GAAAD,GAAA,QAAA6B,GAAA9B,EAAAC,GAAA,mBAAA8B,SAAAA,OAAAC,aAAA,kBAAAD,QAAAC,YAAAC,IAAAjC,EAAAkC,WAAAH,OAAAC,YAAAC,MAAAhC,EAAA,YAAAD,EAAAkC,YAAA,GAAAC,OAAAC,UAAAnC,EAAA,YAAA,QAAAoC,GAAArC,GAAAA,EAAAC,EAAAqC,EAAAtC,GAAAuC,OAAAD,EAAAtC,IAAAA,EAAAwC,EAAA,GAAApC,MAAAqC,OAAAC,IAAA1C,EAAAC,GAAA,QAAAqC,GAAAtC,GAAA,IAAA,GAAAC,GAAA,EAAA,EAAAA,IAAAD,EAAAW,EAAAV,GAAAD,EAAAW,EAAAV,GAAA,EAAA,GAAAD,EAAAW,EAAAV,IAAAA,KAAA,MAAAD,GAAAwC,EAAAG,QAAA3C,EAAAW,GACA,QAAAiC,GAAA5C,EAAAC,GAAA,MAAA,YAAAA,EAAA4C,MAAA7C,EAAA8C,YCVA,QAAAC,aAAAC,GACA,MAAAC,MAAAC,OAAAC,aAAAN,MAAA,KACAG,EAAAI,QAAA,SAAA,IAAAA,QAAA,qBAAA,SAAAA,QAAA,MAAA,IAAAC,MAAA,OAIA,QAAAC,aAAAN,GACA,IAAA,GAAAO,GAAA,EAAAC,EAAAC,KAAAT,EAAAI,QAAA,YAAA,KAAAM,KAAAH,EAAAC,EAAArD,SAAAoD,EAAA,CACA,GAAAI,GAAAH,EAAAI,WAAAL,GAAAM,SAAA,GACA,KAAAF,EAAAxD,SAAAwD,EAAA,IAAAA,GACAD,EAAAA,EAAAvD,QAAAwD,EAEA,MAAAD,GAAAI,KAAA,KCHA,QAAAC,QAAAC,EAAAC,EAAAC,EAAAC,GAGA,GA2CAC,GAGAC,EA9CAC,EAAAC,UAAAP,GACAQ,EAAAP,EAGAQ,EAAAP,EAIAQ,EAAA,GAGAC,EAAA,EAGAC,EAAAT,EAGAU,EAAA,KAIAC,EAAA,GAGAC,EAAAC,KAAAC,KAAAL,EAAAE,GAGAI,EAAA,EAGAC,EAAA,GAAAC,OAAA,IACAC,EAAA,GAAAD,OAAA,IAGAE,GAAA,EAAA,EAAA,EAAA,EAAA,GAGAC,EAAA,GAGAC,EAAAC,KAQAC,GAAA,CAGApB,GAAAnE,OAAA,KAAAmE,EAAAqB,UAAArB,EAAAN,EAAA7D,OAAAyF,OACA,KAAA,GAAArC,GAAA,EAAAA,EAAA,KAAAA,EAEA4B,EAAA5B,GAAA,UAAAe,EAAAf,GACA8B,EAAA9B,GAAA,WAAAe,EAAAf,EAKAkC,MAAAI,UAAA,SAAAC,EAAAC,GAEA1B,EAAAyB,EACA1B,EAAA2B,EACAC,WAAA,WAAAR,EAAAS,wBAAA,IAKAR,KAAAQ,qBAAA,WAEA,IAAAP,EAAA,CAKA,GAAAQ,GAAAxB,CACAD,GAAAE,EAAAD,IACAwB,EAAAzB,EAAAE,EAEA,KAAA,GAAApB,GAAA,EAAAA,EAAA2C,IAAA3C,EACA,CAEA,GAAA,GAAAoB,EACA,CACA,GAAAwB,GAAA3B,EACAtB,OAAAC,aAAA+B,GAAA,GAAA,IACAhC,OAAAC,aAAA+B,GAAA,GAAA,IACAhC,OAAAC,aAAA+B,GAAA,EAAA,IACAhC,OAAAC,aAAA,GAAA+B,EAEAL,GAAAc,UAAAR,EAAA5C,OAAAgC,UAAA4B,IACA,IAAA,EAAAA,EAAAhG,QACA0E,EAAAc,UAAAN,EAAA9C,OAAAsC,GAAA,SAIAA,GAAAc,UAAAR,EAAA5C,OAAAsC,GACA,IAAA,GAAAA,EAAA1E,QACA0E,EAAAc,UAAAN,EAAA9C,OAAAsC,GAAA,IAGA,KAAA,GAAAuB,GAAA,EAAAA,EAAAvB,EAAA1E,SAAAiG,EACAd,EAAAc,IAAAvB,EAAAuB,EAEAzB,KAKA,GAAAA,EAAAF,EAEAuB,WAAA,WAAAR,EAAAS,wBAAA,OAIA,IAAAf,EAAAH,EAGA,MAAAV,GACAA,GAAAa,EAAA,EAAAP,EAAAF,GAAAM,EAAA,KAEAQ,GAAAc,SAAAC,UAAAhB,IAEAJ,IACAI,GAAA,EAAA,EAAA,EAAA,EAAA,GACAX,EAAA,EAEAqB,WAAA,WAAAR,EAAAS,wBAAA,OAGA,CAGA,GAAAtC,GAAA0C,SAAAC,UAAAhB,GACAC,IAAA5B,EAAA4C,OAAA,EAAA,GAAA3B,GAAAG,EAAA,GAAAD,IAGAV,EAAAmB,MAKAE,KAAAe,KAAA,WAEAd,GAAA,GC/KA,QAAAe,UAAAvF,GAAA,MAAAmF,UAAAK,UAAAC,cAAAzF,KACA,QAAA0F,UAAA1F,GAAA,MAAA2F,UAAAH,UAAAC,cAAAzF,KACA,QAAA4F,UAAA5F,EAAAV,GAAA,MAAAuG,UAAAL,UAAAC,cAAAzF,IAAAV,GACA,QAAAwG,eAAApG,EAAAL,GACA,MAAA8F,UAAAY,eAAAN,cAAA/F,GAAA+F,cAAApG,KACA,QAAA2G,eAAAtG,EAAAL,GACA,MAAAsG,UAAAI,eAAAN,cAAA/F,GAAA+F,cAAApG,KACA,QAAA4G,eAAAvG,EAAAL,EAAAC,GACA,MAAAuG,UAAAE,eAAAN,cAAA/F,GAAA+F,cAAApG,IAAAC,GAKA,QAAA4G,gBAEA,MAAA,4CAAAX,SAAA,OAAAY,cAMA,QAAAX,WAAAxF,GAEA,MAAAoF,WAAAX,UAAApB,UAAArD,GAAA,EAAAA,EAAAf,SAMA,QAAA8G,gBAAAK,EAAAC,GAEA,GAAAC,GAAAjD,UAAA+C,EACAE,GAAArH,OAAA,KAAAqH,EAAA7B,UAAA6B,EAAA,EAAAF,EAAAnH,QAGA,KAAA,GADAsH,GAAArC,MAAA,IAAAsC,EAAAtC,MAAA,IACA7B,EAAA,EAAAA,EAAA,GAAAA,IAEAkE,EAAAlE,GAAA,UAAAiE,EAAAjE,GACAmE,EAAAnE,GAAA,WAAAiE,EAAAjE,EAGA,IAAAoE,GAAAhC,UAAA8B,EAAAlF,OAAAgC,UAAAgD,IAAA,IAAA,EAAAA,EAAApH,OACA,OAAAmG,WAAAX,UAAA+B,EAAAnF,OAAAoF,GAAA,MAMA,QAAAtB,UAAAuB,GAEA,KAAA,MAAApH,GAAAqH,QAAA,EAIA,IAAA,GADAvG,GAFAwG,EAAAD,QAAA,mBAAA,mBACAE,EAAA,GAEAxE,EAAA,EAAAA,EAAAqE,EAAAzH,OAAAoD,IAEAjC,EAAAsG,EAAAhE,WAAAL,GACAwE,GAAAD,EAAAE,OAAA1G,IAAA,EAAA,IACAwG,EAAAE,OAAA,GAAA1G,EAEA,OAAAyG,GAMA,QAAAlB,UAAAe,GAEA,KAAA,MAAApH,GAAAyH,OAAA,GAIA,IAAA,GAHAC,GAAA,mEACAH,EAAA,GACAI,EAAAP,EAAAzH,OACAoD,EAAA,EAAAA,EAAA4E,EAAA5E,GAAA,EAKA,IAAA,GAHA6E,GAAAR,EAAAhE,WAAAL,IAAA,IACAA,EAAA,EAAA4E,EAAAP,EAAAhE,WAAAL,EAAA,IAAA,EAAA,IACAA,EAAA,EAAA4E,EAAAP,EAAAhE,WAAAL,EAAA,GAAA,GACA6C,EAAA,EAAAA,EAAA,EAAAA,IAEA2B,GAAA,EAAAxE,EAAA,EAAA6C,EAAA,EAAAwB,EAAAzH,OAAA8H,OACAC,EAAAF,OAAAI,IAAA,GAAA,EAAAhC,GAAA,GAGA,OAAA2B,GAMA,QAAAhB,UAAAa,EAAAS,GAEA,GAEA9E,GAAApC,EAAAG,EAAAgH,EAFAC,EAAAF,EAAAlI,OACAqI,EAAApD,QAIAqD,EAAArD,MAAAJ,KAAAC,KAAA2C,EAAAzH,OAAA,GACA,KAAAoD,EAAA,EAAAA,EAAAkF,EAAAtI,OAAAoD,IAEAkF,EAAAlF,GAAAqE,EAAAhE,WAAA,EAAAL,IAAA,EAAAqE,EAAAhE,WAAA,EAAAL,EAAA,EASA,MAAAkF,EAAAtI,OAAA,GACA,CAGA,IAFAmI,EAAAlD,QACA9D,EAAA,EACAiC,EAAA,EAAAA,EAAAkF,EAAAtI,OAAAoD,IAEAjC,GAAAA,GAAA,IAAAmH,EAAAlF,GACApC,EAAA6D,KAAA0D,MAAApH,EAAAiH,GACAjH,GAAAH,EAAAoH,GACAD,EAAAnI,OAAA,GAAAgB,EAAA,KACAmH,EAAAA,EAAAnI,QAAAgB,EAEAqH,GAAAA,EAAArI,QAAAmB,EACAmH,EAAAH,EAIA,GAAAP,GAAA,EACA,KAAAxE,EAAAiF,EAAArI,OAAA,EAAAoD,GAAA,EAAAA,IACAwE,GAAAM,EAAAL,OAAAQ,EAAAjF,GAGA,IAAAoF,GAAA3D,KAAAC,KAAA,EAAA2C,EAAAzH,QACA6E,KAAA4D,IAAAP,EAAAlI,QAAA6E,KAAA4D,IAAA,IACA,KAAArF,EAAAwE,EAAA5H,OAAAoD,EAAAoF,EAAApF,IACAwE,EAAAM,EAAA,GAAAN,CAEA,OAAAA,GAOA,QAAApB,eAAAiB,GAMA,IAJA,GAEAtG,GAAAe,EAFA0F,EAAA,GACAxE,GAAA,IAGAA,EAAAqE,EAAAzH,QAGAmB,EAAAsG,EAAAhE,WAAAL,GACAlB,EAAAkB,EAAA,EAAAqE,EAAAzH,OAAAyH,EAAAhE,WAAAL,EAAA,GAAA,EACA,OAAAjC,GAAAA,GAAA,OAAA,OAAAe,GAAAA,GAAA,QAEAf,EAAA,QAAA,KAAAA,IAAA,KAAA,KAAAe,GACAkB,KAIAjC,GAAA,IACAyG,GAAA7E,OAAAC,aAAA7B,GACAA,GAAA,KACAyG,GAAA7E,OAAAC,aAAA,IAAA7B,IAAA,EAAA,GACA,IAAA,GAAAA,GACAA,GAAA,MACAyG,GAAA7E,OAAAC,aAAA,IAAA7B,IAAA,GAAA,GACA,IAAAA,IAAA,EAAA,GACA,IAAA,GAAAA,GACAA,GAAA,UACAyG,GAAA7E,OAAAC,aAAA,IAAA7B,IAAA,GAAA,EACA,IAAAA,IAAA,GAAA,GACA,IAAAA,IAAA,EAAA,GACA,IAAA,GAAAA,GAEA,OAAAyG,GAMA,QAAAc,kBAAAjB,GAGA,IAAA,GADAG,GAAA,GACAxE,EAAA,EAAAA,EAAAqE,EAAAzH,OAAAoD,IACAwE,GAAA7E,OAAAC,aAAA,IAAAyE,EAAAhE,WAAAL,GACAqE,EAAAhE,WAAAL,KAAA,EAAA,IACA,OAAAwE,GAGA,QAAAe,kBAAAlB,GAGA,IAAA,GADAG,GAAA,GACAxE,EAAA,EAAAA,EAAAqE,EAAAzH,OAAAoD,IACAwE,GAAA7E,OAAAC,aAAAyE,EAAAhE,WAAAL,KAAA,EAAA,IACA,IAAAqE,EAAAhE,WAAAL,GACA,OAAAwE,GAOA,QAAAxD,WAAAqD,GAGA,IAAA,GADAG,GAAA3C,MAAAwC,EAAAzH,QAAA,GACAoD,EAAA,EAAAA,EAAAwE,EAAA5H,OAAAoD,IACAwE,EAAAxE,GAAA,CACA,KAAA,GAAAA,GAAA,EAAAA,EAAA,EAAAqE,EAAAzH,OAAAoD,GAAA,EACAwE,EAAAxE,GAAA,KAAA,IAAAqE,EAAAhE,WAAAL,EAAA,KAAA,GAAAA,EAAA,EACA,OAAAwE,GAMA,QAAAzB,WAAAsB,GAGA,IAAA,GADAG,GAAA,GACAxE,EAAA,EAAAA,EAAA,GAAAqE,EAAAzH,OAAAoD,GAAA,EACAwE,GAAA7E,OAAAC,aAAAyE,EAAArE,GAAA,KAAA,GAAAA,EAAA,GAAA,IACA,OAAAwE,GAMA,QAAApC,WAAArE,EAAA6G,GAGA7G,EAAA6G,GAAA,IAAA,KAAA,GAAAA,EAAA,GACA7G,GAAA6G,EAAA,IAAA,GAAA,GAAA,IAAAA,CASA,KAAA,GAPA9G,GAAA+D,MAAA,IACApF,EAAA,WACAC,GAAA,UACAC,GAAA,WACAK,EAAA,UACAC,GAAA,WAEA+C,EAAA,EAAAA,EAAAjC,EAAAnB,OAAAoD,GAAA,GACA,CAOA,IAAA,GANAwF,GAAA/I,EACAgJ,EAAA/I,EACAgJ,EAAA/I,EACAgJ,EAAA3I,EACA4I,EAAA3I,EAEA4F,EAAA,EAAAA,EAAA,GAAAA,IACA,CACAA,EAAA,GAAA/E,EAAA+E,GAAA9E,EAAAiC,EAAA6C,GACA/E,EAAA+E,GAAAgD,QAAA/H,EAAA+E,EAAA,GAAA/E,EAAA+E,EAAA,GAAA/E,EAAA+E,EAAA,IAAA/E,EAAA+E,EAAA,IAAA,EACA,IAAArG,GAAAsJ,SAAAA,SAAAD,QAAApJ,EAAA,GAAAsJ,QAAAlD,EAAAnG,EAAAC,EAAAK,IACA8I,SAAAA,SAAA7I,EAAAa,EAAA+E,IAAAmD,QAAAnD,IACA5F,GAAAD,EACAA,EAAAL,EACAA,EAAAkJ,QAAAnJ,EAAA,IACAA,EAAAD,EACAA,EAAAD,EAGAC,EAAAqJ,SAAArJ,EAAA+I,GACA9I,EAAAoJ,SAAApJ,EAAA+I,GACA9I,EAAAmJ,SAAAnJ,EAAA+I,GACA1I,EAAA8I,SAAA9I,EAAA2I,GACA1I,EAAA6I,SAAA7I,EAAA2I,GAEA,MAAA/D,OAAApF,EAAAC,EAAAC,EAAAK,EAAAC,GAQA,QAAA8I,SAAAvJ,EAAAE,EAAAC,EAAAK,GAEA,MAAAR,GAAA,GAAAE,EAAAC,GAAAD,EAAAM,EACAR,EAAA,GAAAE,EAAAC,EAAAK,EACAR,EAAA,GAAAE,EAAAC,EAAAD,EAAAM,EAAAL,EAAAK,EACAN,EAAAC,EAAAK,EAMA,QAAAgJ,SAAAxJ,GAEA,MAAAA,GAAA,GAAA,WAAAA,EAAA,GAAA,WACAA,EAAA,IAAA,YAAA,UAOA,QAAAsJ,UAAA/H,EAAAe,GAEA,GAAAmH,IAAA,MAAAlI,IAAA,MAAAe,GACAoH,GAAAnI,GAAA,KAAAe,GAAA,KAAAmH,GAAA,GACA,OAAAC,IAAA,GAAA,MAAAD,EAMA,QAAAJ,SAAAM,EAAAC,GAEA,MAAAD,IAAAC,EAAAD,IAAA,GAAAC,ECxUA,GAAAC,UAAA,KAEAC,YAAA,WACA,YAYA,SAAAC,GAAAC,EAAAC,EAAAC,GACA,MAAA,IAAAC,SAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAC,GAEA,IAAA,mBAAAL,GAEA,IAAA,GAAAM,KAAAN,GACAI,EAAAE,GAAAN,EAAAM,EAQA,IAJAN,EAAAO,SACAC,QAAA7B,IAAA,oBAAA,OAAAoB,EAAA,WAAAK,GAGA,IAAAN,EAAAW,OAGA,WADAP,GAAA,GAIA,IAAAQ,GAAAC,EAAAZ,GAEAa,EAAAzK,KAAAuH,KAAAmD,OAAAnD,KAAAoD,EAAAJ,IACA1G,EAAA7D,KAAA4K,MAAAtH,IAAAuH,SAAAJ,EACAZ,GAAAhG,OACAA,EAAAgG,EAAAhG,KAAAA,GAGAgG,EAAAO,SACAC,QAAA7B,IAAA,2BAAA3E,EAGA,IAAAiC,GAAAmE,EAAAnE,YAAAjC,EAAA9D,OAAA4J,EAAA5J,OAAA,GAGA+K,EAAA,SAAA5D,GACA,GAAA6D,GAAA,GAAA/K,MAAAgL,KAAAC,KAAA/D,EAAAlH,KAAAuH,KAAA2D,KACA7F,MAAA9C,QAAA,WACA,MAAAwI,GAAAxI,QAAAE,MAAAsI,EAAArI,aAIAyI,EAAAnL,KAAA4K,MAAAQ,WAAAC,OAAAxH,EACA8F,GAAA3J,KAAA4K,MAAAtH,IAAA+H,OAAA1B,EACA,IAAA2B,GAAAtL,KAAAgL,KAAAO,OAAA5B,EAAAwB,EAAArF,EAAA,IAAAgF,GACAU,EAAAxL,KAAA4K,MAAAtH,IAAAuH,SAAAS,EACAG,GAAAD,EAAA3H,EAAAoG,EAAAF,EAAAC,KAOA,QAAA0B,GAAA/B,EAAAC,EAAAC,GACA,MAAA,IAAAC,SAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAC,GAEA,IAAA,mBAAAL,GAEA,IAAA,GAAAM,KAAAN,GACAI,EAAAE,GAAAN,EAAAM,EAQA,IAJAN,EAAAO,SACAC,QAAA7B,IAAA,oBAAA,OAAAoB,EAAA,WAAAK,GAGA,IAAAN,EAAAW,OAGA,WADAP,GAAA,GAIA,IAAAQ,GAAAC,EAAAZ,GACA/F,EAAA8G,EAAAJ,EAEAV,GAAAO,SACAC,QAAA7B,IAAA,2BAAA3E,EAGA,IAAAiC,GAAAmE,EAAAnE,YAAAjC,EAAA9D,OAAA4J,EAAA5J,OAAA,EAEA,OAAAyJ,UACAA,SAAApD,OAEAoD,SAAA,GAAA7F,QAAAgG,EAAA9F,EAAAiC,EAAA,IAEA,IAAA6F,GAAA,SAAAzE,GACAuE,EAAAvE,EAAArD,EAAAoG,EAAAF,EAAAC,GAEAR,UAAA/D,UAAAoE,EAAA+B,eAAAD,KAMA,QAAAF,GAAAvE,EAAArD,EAAAgG,EAAAgC,EAAAC,GACA,GAAAC,GAAApJ,YAAAuE,GAGA8E,EAAA,CACAnC,GAAAoC,cACAD,IACAnC,EAAAqC,gBACAF,IACAnC,EAAAsC,SACAH,IACAnC,EAAAuC,cACAJ,GAYA,KAAA,GAVAK,GAAA,GACAC,EAAA,GACAC,EAAA1I,EAAA9D,OAAA8J,EAAA2C,gBAAAzM,OAEA0M,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EAEA1J,EAAA,EAAAA,EAAA4I,EAAAhM,OAAAoD,IAAA,CACA,GAAA2J,GAAAf,EAAAnE,OAAAzE,GACA4J,EAAAD,EAAAtJ,YAmDA,IAjDAqJ,GAAA,EAGAb,EAAA,IAEAnC,EAAAoC,eAAAQ,GAAAM,GAAA,IACAA,GAAA,KACAV,GAAAS,EACAL,GAAA,EACAT,IACAa,GAAA,GACAhD,EAAAqC,iBAAAQ,GAAAK,GAAA,IACAA,GAAA,IACAV,GAAAS,EACAJ,GAAA,EACAV,IACAa,GAAA,GACAhD,EAAAsC,UAAAQ,GAAAI,GAAA,IACAA,GAAA,IACAV,GAAAS,EACAH,GAAA,EACAX,IACAa,GAAA,IACAhD,EAAAuC,cAAAQ,GACA,IAAAG,GAAA,IAAAA,GAAA,IAAAA,IACAV,GAAAxC,EAAA2C,gBAAA5E,QAAA2E,EAAApJ,GACA0G,EAAA2C,gBAAAzM,QACA6M,GAAA,EACAZ,IACAa,GAAA,IAKAA,IACAhD,EAAAoC,cAAAc,GAAA,IAAAA,GAAA,IACAT,GAAAQ,EACAjD,EAAAqC,gBAAAa,GAAA,IAAAA,GAAA,GACAT,GAAAQ,EACAjD,EAAAsC,SAAAY,GAAA,IAAAA,GAAA,GACAT,GAAAQ,GACAjD,EAAAuC,cACA,IAAAW,GAAA,IAAAA,GAAA,IAAAA,IACAT,GAAAzC,EAAA2C,gBACA5E,QAAA2E,EAAApJ,GACA0G,EAAA2C,gBAAAzM,UAIA,GAAAiM,GAAAK,EAAAtM,OAAAuM,EAAAvM,QAAA8J,EAAA9J,OACA,MAKA8L,GAAAQ,EAAAC,GAAAU,UAAA,EAAAnD,EAAA9J,SAOA,QAAAkN,GAAAtD,EAAAC,EAAA7J,EAAAkM,EAAAC,EAAAC,EAAAC,EAAAI,EAAAX,GACA,GAAA,IAAAlC,EAAAW,OAEA,MAAA,EAGA,IAAAC,GAAAC,EAAAZ,GACA/F,EAAA8G,EAAAJ,GACA2C,EAAArJ,EAAA8F,EAEA2C,EAAAjG,SAAA6G,EACAZ,GAAAA,EAAAU,UAAA,EAAAjN,EAEA,IAAAoN,GAAAD,EAAAnN,QAAAA,EAAA,GAAA,EACAqN,EAAAF,EAAAnN,OAAA,EAAA,EAEAwM,EAAA1I,EAAA9D,OAAAyM,EAAAzM,MAEA,KAAAoM,EAAA,CACA,GAAAkB,GAAA,EACA,KAAAlK,EAAA,EAAAA,EAAAmJ,EAAAvM,OAAAoD,IAIAkK,GAHAC,MAAAhB,EAAAU,UAAA7J,EAAAA,EAAA,IAGAmJ,EAAA1E,OAAAzE,GAFAL,OAAAC,aAAA,GAAAwK,SAAAjB,EAAA1E,OAAAzE,IAKAmJ,GAAAe,EAGA,IAAApB,EACA,GAAAC,EACAI,EAAAA,EAAAkB,kBACA,IAAArB,EAAA,CACAkB,EAAA,EACA,KAAA,GAAAlK,GAAA,EAAAA,EAAAmJ,EAAAvM,OAAAoD,IACAkK,GAAAf,EAAA9I,WAAAL,GAAA,EAEAmJ,GAAAe,EAGA,GAAAnB,GAAAD,EAAA,CACAoB,EAAA,EAEA,KAAA,GADAvN,GAAA,EACAqD,EAAA,EAAAA,EAAAmJ,EAAAvM,OAAAoD,IAAA,CACA,GAAAsK,GAAAnB,EAAA1E,OAAAzE,EACAmK,OAAAG,IAEAJ,GADAvN,EAAAsN,GAAA,EACAK,EAAAD,cAEAC,EACA3N,KAEAuN,GAAAI,EAGAnB,EAAAe,EAGA,GAAAjB,EAAA,CACAiB,EAAA,EACA,KAAA,GAAAlK,GAAA,EAAAA,EAAAmJ,EAAAvM,OAAAoD,IAEAkK,GADAlK,EAAA,GAAAA,EAAAgK,GAAA,EACAX,EAAA5E,OAAA2E,EAAApJ,EAAAqJ,EAAAzM,QAEAuM,EAAA1E,OAAAzE,EAGAmJ,GAAAe,EAIAxB,EAAAS,GAIA,QAAAoB,KACA,GAAAjD,GAAAzK,KAAAuH,KAAAmD,OAAAnD,KAAAvH,KAAAsB,OAAAqM,YAAA,GAAA,GACA,OAAA3N,MAAA4K,MAAAtH,IAAAuH,SAAAJ,GAYA,QAAAE,GAAAJ,GAEA,GAAAA,GAAA,KAAAA,EAAA,CAEA,GAAAqD,GAAArD,EAAAtH,MAAA,KAAA4K,UACAtE,EAAAqE,EAAA7N,MACA,OAAAwJ,IAAA,EAEAqE,EAAA,GAAAE,MAAA,qDACAF,EAAA,GAEAA,EAAA,GAEArE,GAAA,EACAqE,EAAA,GAEArD,EAIA,MAAAA,GAUA,QAAAC,GAAAuD,GACA,IAAAA,EACA,MAAAA,EAEA,IAAAC,GAAAC,SAAAC,cAAA,KAEAC,EAAAJ,EAAA9G,cAAAjE,QAAA,SAAA,IACA4G,EAAAuE,CAWA,OATAH,GAAAI,KAAAxE,GAEAoE,EAAAK,KAAAC,QAAA,cAAA,GAAAH,EAAAG,QAAA,eAAA,GACAN,EAAAK,KAAAC,QAAA,cAAA,GAAAH,EAAAG,QAAA,eAAA,KAEA1E,EAAA,UAAAA,EACAoE,EAAAI,KAAAxE,GAGAoE,EAAAO,SAOA,QAAArE,KACA,OACAnK,OAAA,GACAkM,cAAA,EACAC,gBAAA,EACAC,SAAA,EACAC,cAAA,EACAI,gBAAA,gCACA1G,WAAA,IACA8F,eAAA4C,QAjWA,OACA9E,4BAAAA,EACAgC,kBAAAA,EACAuB,qBAAAA,EACAS,WAAAA,EACA/C,WAAAA,EACAH,UAAAA,EACAN,kBAAAA,MJXAlK,MAAAqC,UAAAkF,QAAAkH,eAAAC,QAAA1D,QAAAJ,SAAA3K,WAAA0O,QAAA,SAAA/O,GAAAyF,KAAA5B,SAAA,WAAA,MAAA,YAAA4B,KAAAuJ,SAAAvJ,KAAAuJ,QAAAhP,GAAAM,QAAA,SAAAN,GAAAyF,KAAA5B,SAAA,WAAA,MAAA,YAAA4B,KAAAuJ,SAAAvJ,KAAAuJ,QAAAhP,GAAAiP,IAAA,SAAAjP,GAAAyF,KAAA5B,SAAA,WAAA,MAAA,QAAA4B,KAAAuJ,SAAAvJ,KAAAuJ,QAAAhP,GAAAkP,SAAA,SAAAlP,GAAAyF,KAAA5B,SAAA,WAAA,MAAA,cAAA4B,KAAAuJ,SAAAvJ,KAAAuJ,QAAAhP,IACAI,MAAAqC,OAAAC,IAAA,SAAA1C,GAAAyF,KAAAvE,EAAA,GAAA,GAAA,IAAAuE,KAAA0J,GAAA,IAAAlP,GAAAC,EAAAK,EAAAC,EAAAC,EAAAgF,KAAAvE,EAAA,GAAA,GAAAR,EAAA+E,KAAAvE,EAAA,EAAAjB,GAAAD,EAAAG,MAAA,IAAAQ,GAAA,CAAA,IAAA,IAAAV,GAAA,IAAAA,GAAA,IAAAA,EAAA,KAAA,IAAAG,MAAAC,UAAAC,QAAA,uBAAA,KAAAmF,KAAAxF,GAAAM,EAAAP,EAAAoP,MAAA,GAAA5O,MAAAR,EAAAC,EAAAD,EAAA,EAAAC,EAAA,GAAAD,IAAAE,EAAAK,EAAAP,EAAA,IAAA,IAAAA,EAAAC,GAAA,IAAAA,GAAA,IAAAD,EAAAC,KAAAC,EAAAO,EAAAP,IAAA,KAAA,GAAAO,EAAAP,GAAA,GAAA,MAAA,GAAAO,EAAAP,GAAA,EAAA,MAAA,EAAAO,EAAA,IAAAP,GAAA,IAAAF,EAAAC,IAAAC,EAAAA,GAAA,EAAAA,IAAA,GAAAS,GAAA,GAAAA,EAAAA,GAAA,EAAA,KAAAA,GAAA,KAAAJ,EAAAP,GAAAO,EAAAP,EAAAC,GAAAC,CAAA,KAAAD,EAAA,EAAAD,EAAAC,IAAAD,IAAAE,EAAAK,EAAA,EAAAN,EAAAD,EAAAA,EAAA,GAAAQ,EAAAP,GAAA,GAAAD,GAAA,EAAAC,EAAAC,EAAAQ,EAAA,GAAAD,EAAAP,IAAA,KAAAQ,EAAA,GAAAD,EAAAP,GAAA,GAAA,MAAAQ,EAAA,GAAAD,EAAAP,GAAA,EAAA,MAAAQ,EAAA,GAAAD,EACA,IADAP,KAEAE,KAAAqC,OAAAC,IAAA2M,WAAA1M,QAAA,SAAA3C,GAAA,MAAAD,GAAA0F,KAAAzF,EAAA,IAAAsP,QAAA,SAAAtP,GAAA,MAAAD,GAAA0F,KAAAzF,EAAA,IAAAkB,sCAAAiO,EAAA,WAAA,GAAA3O,GAAAC,EAAAC,EAAAG,EAAAE,EAAAD,EAAAE,EAAAhB,EAAAyF,KAAAvE,EAAA,GAAAjB,EAAAwF,KAAAvE,EAAA,GAAAhB,EAAAF,EAAA,GAAAO,EAAAN,EAAA,GAAAU,KAAAC,IAAA,KAAAJ,EAAA,EAAA,IAAAA,EAAAA,IAAAI,GAAAD,EAAAH,GAAAA,GAAA,EAAA,KAAAA,GAAA,IAAAA,GAAAA,CAAA,KAAAC,EAAAC,EAAA,GAAAR,EAAAO,GAAAA,GAAAI,GAAA,EAAAH,EAAAE,EAAAF,IAAA,EAAA,IAAAI,EAAAJ,EAAAA,GAAA,EAAAA,GAAA,EAAAA,GAAA,EAAAA,GAAA,EAAAI,EAAAA,GAAA,EAAA,IAAAA,EAAA,GAAAZ,EAAAO,GAAAK,EAAAP,EAAAO,GAAAL,EAAAM,EAAAJ,EAAAH,EAAAG,EAAAE,EAAAF,EAAAF,KAAAO,EAAA,SAAAD,EAAA,MAAAP,EAAA,IAAAK,EAAA,SAAAJ,EAAAM,EAAA,IAAAJ,EAAAG,GAAA,SAAAA,EAAAN,EAAA,EAAA,EAAAA,EAAAA,IAAAR,EAAAQ,GAAAC,GAAAM,EAAAA,GAAA,GAAAA,IAAA,EAAAd,EAAAO,GAAAM,GAAAE,EAAAA,GAAA,GAAAA,IAAA,CAAA,KAAAR,EACA,EAAA,EAAAA,EAAAA,IAAAR,EAAAQ,GAAAR,EAAAQ,GAAA4O,MAAA,GAAAnP,EAAAO,GAAAP,EAAAO,GAAA4O,MAAA,KAGAhP,KAAAmP,UAAAC,SAAA,SAAAxP,EAAAC,EAAAC,GAAA,MAAAF,GAAAI,KAAAmP,SAAAE,EAAAzP,EAAAoP,MAAAnP,EAAA,IAAA,IAAA,GAAAA,IAAAmP,MAAA,GAAA,SAAAlP,EAAAF,EAAAI,KAAAmP,SAAAG,MAAA1P,EAAAE,EAAAD,IAAA0P,QAAA,SAAA3P,EAAAC,EAAAC,GAAA,GAAAK,GAAAyE,KAAA0D,OAAAzI,EAAAC,EAAA,GAAA,SAAAD,EAAAC,EAAA,EAAAD,IAAA,GAAAD,EAAAC,EAAA,GAAA,IAAA,GAAAM,EAAAP,EAAAC,EAAA,GAAA,EAAA,KAAAM,EAAAP,EAAAC,EAAA,GAAA,KAAAM,IAAA,GAAAL,GAAA,GAAAqC,OAAA,SAAAvC,EAAAC,GAAA,GAAA,IAAAD,EAAAG,QAAA,IAAAF,EAAAE,OAAA,MAAAH,GAAAuC,OAAAtC,EAAA,IAAAC,GAAAF,EAAAA,EAAAG,OAAA,GAAAI,EAAAH,KAAAmP,SAAAK,WAAA1P,EAAA,OAAA,MAAAK,EAAAP,EAAAuC,OAAAtC,GAAAG,KAAAmP,SAAAE,EAAAxP,EAAAM,EAAA,EAAAL,EAAAF,EAAAoP,MAAA,EAAApP,EAAAG,OAAA,KAAA0P,UAAA,SAAA7P,GAAA,GAAAC,GAAAD,EAAAG,MAAA,OAAA,KACAF,EAAA,EAAA,IAAAA,EAAA,GAAAG,KAAAmP,SAAAK,WAAA5P,EAAAC,EAAA,KAAAyP,MAAA,SAAA1P,EAAAC,GAAA,GAAA,GAAAD,EAAAG,OAAAF,EAAA,MAAAD,EAAAA,GAAAA,EAAAoP,MAAA,EAAApK,KAAAC,KAAAhF,EAAA,IAAA,IAAAC,GAAAF,EAAAG,MAAA,OAAAF,GAAA,GAAAA,EAAA,EAAAC,GAAAD,IAAAD,EAAAE,EAAA,GAAAE,KAAAmP,SAAAO,QAAA7P,EAAAD,EAAAE,EAAA,GAAA,YAAAD,EAAA,EAAA,IAAAD,GAAA8P,QAAA,SAAA9P,EAAAC,EAAAC,GAAA,MAAA,MAAAF,EAAAC,GAAAC,EAAA,EAAAD,EAAAA,GAAA,GAAAD,GAAA,cAAAA,GAAA4P,WAAA,SAAA5P,GAAA,MAAAgF,MAAA+K,MAAA/P,EAAA,gBAAA,IAAAgQ,MAAA,SAAAhQ,EAAAC,GAAA,GAAAG,KAAAmP,SAAAM,UAAA7P,KAAAI,KAAAmP,SAAAM,UAAA5P,GAAA,OAAA,CAAA,IAAAM,GAAAL,EAAA,CAAA,KAAAK,EAAA,EAAAA,EAAAP,EAAAG,OAAAI,IAAAL,GAAAF,EAAAO,GAAAN,EAAAM,EAAA,OAAA,KACAL,GAAAuP,EAAA,SAAAzP,EAAAC,EAAAC,EAAAK,GAAA,GAAAC,EAAA,KAAAA,EAAA,EAAA,SAAAD,IAAAA,MAAA,IAAAN,EAAAA,GAAA,GAAAM,EAAAsB,KAAA3B,GAAAA,EAAA,CAAA,IAAA,IAAAD,EAAA,MAAAM,GAAAgC,OAAAvC,EAAA,KAAAQ,EAAA,EAAAA,EAAAR,EAAAG,OAAAK,IAAAD,EAAAsB,KAAA3B,EAAAF,EAAAQ,KAAAP,GAAAC,EAAAF,EAAAQ,IAAA,GAAAP,CAAA,OAAAO,GAAAR,EAAAG,OAAAH,EAAAA,EAAAG,OAAA,GAAA,EAAAH,EAAAI,KAAAmP,SAAAK,WAAApP,GAAAD,EAAAsB,KAAAzB,KAAAmP,SAAAO,QAAA7P,EAAAD,EAAA,GAAA,GAAAC,EAAAD,EAAAE,EAAAK,EAAA0P,MAAA,IAAA1P,GAAAgD,EAAA,SAAAvD,EAAAC,GAAA,OAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,KAAAiQ,UAAA,SAAAlQ,GAAA,GAAAC,GAAAC,CAAA,KAAAD,EAAA,EAAAA,EAAAD,EAAAG,SAAAF,EAAAC,EAAAF,EAAAC,GAAAD,EAAAC,GAAAC,IAAA,GAAAA,IAAA,EAAA,OAAA,MAAAA,IAAA,EAAAA,GAAA,EAAA,OAAAF,KACAI,KAAA4K,MAAAQ,YAAAP,SAAA,SAAAjL,GAAA,GAAAO,GAAAC,EAAAP,EAAA,GAAAC,EAAAE,KAAAmP,SAAAM,UAAA7P,EAAA,KAAAO,EAAA,EAAAA,EAAAL,EAAA,EAAAK,IAAA,KAAA,EAAAA,KAAAC,EAAAR,EAAAO,EAAA,IAAAN,GAAAiD,OAAAC,aAAA3C,IAAA,IAAA,IAAA,GAAAA,IAAA,CAAA,OAAA2P,oBAAAC,OAAAnQ,KAAAwL,OAAA,SAAAzL,GAAAA,EAAAqQ,SAAAC,mBAAAtQ,GAAA,IAAAE,GAAAD,KAAAM,EAAA,CAAA,KAAAL,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAAK,EAAAA,GAAA,EAAAP,EAAA4D,WAAA1D,GAAA,KAAA,EAAAA,KAAAD,EAAA4B,KAAAtB,GAAAA,EAAA,EAAA,OAAA,GAAAL,GAAAD,EAAA4B,KAAAzB,KAAAmP,SAAAO,QAAA,GAAA,EAAA5P,GAAAK,IAAAN,IACAG,KAAA4K,MAAAtH,KAAAuH,SAAA,SAAAjL,GAAA,GAAAE,GAAAD,EAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAAD,KAAA,EAAAD,EAAAE,IAAA,gBAAA2D,SAAA,IAAA0C,OAAA,EAAA,OAAAtG,GAAAsG,OAAA,EAAAnG,KAAAmP,SAAAM,UAAA7P,GAAA,IAAAyL,OAAA,SAAAzL,GAAA,GAAAC,GAAAM,EAAAL,IAAA,KAAAF,EAAAA,EAAAoD,QAAA,SAAA,IAAA7C,EAAAP,EAAAG,OAAAH,GAAA,WAAAC,EAAA,EAAAA,EAAAD,EAAAG,OAAAF,GAAA,EAAAC,EAAA2B,KAAA,EAAA8L,SAAA3N,EAAAuG,OAAAtG,EAAA,GAAA,IAAA,OAAAG,MAAAmP,SAAAG,MAAAxP,EAAA,EAAAK,KACAH,KAAA4K,MAAAuF,QAAA3N,EAAA,mCAAA4N,EAAA,mCAAAC,KAAA,GAAAC,KAAA,EAAAC,UAAA,GAAA1F,SAAA,SAAAjL,EAAAC,EAAAC,GAAA,GAAAK,GAAAH,KAAA4K,MAAAuF,OAAAG,KAAAlQ,EAAAJ,KAAA4K,MAAAuF,OAAAI,UAAAlQ,EAAA,GAAAC,EAAA,EAAAC,EAAAP,KAAA4K,MAAAuF,OAAA3N,EAAAhC,EAAA,EAAAC,EAAAT,KAAAmP,SAAAM,UAAA7P,EAAA,KAAAE,IAAAS,EAAAP,KAAA4K,MAAAuF,OAAAC,GAAAtQ,EAAA,EAAAO,EAAAN,OAAAI,EAAAM,GAAAJ,GAAAE,EAAAqH,QAAApH,EAAAZ,EAAAE,KAAAQ,KAAAF,GAAAE,EAAAH,GAAAK,EAAAZ,EAAAE,IAAAK,EAAAG,EAAAA,GAAAF,EAAAN,MAAAU,IAAAL,EAAAG,GAAAH,EAAA,MAAA,EAAAE,EAAAN,SAAAF,GAAAQ,GAAA,GAAA,OAAAA,IAAAgL,OAAA,SAAAzL,EAAAC,GAAAD,EAAAA,EAAAoD,QAAA,QAAA,IAAAwK,aAAA,IACAlN,GAAAK,EADAb,EAAAE,KAAA4K,MAAAuF,OAAAE,KACAlQ,EAAAH,KAAA4K,MAAAuF,OAAAG,KAAAlQ,EAAAJ,KAAA4K,MAAAuF,OAAAI,UAAAlQ,KAAAE,EAAA,EAAAC,EAAAR,KAAA4K,MAAAuF,OAAA3N,EAAA/B,EAAA,EAAAC,EAAA,QAAA,KAAAb,IAAAW,EAAAR,KAAA4K,MAAAuF,OAAAC,EAAA1P,EAAA,aAAAJ,EAAA,EAAAA,EAAAV,EAAAG,OAAAO,IAAA,CAAA,GAAAK,EAAAH,EAAA8N,QAAA1O,EAAAgI,OAAAtH,IAAA,EAAAK,EAAA,CAAA,IAAAd,EAAA,IAAA,MAAAG,MAAA4K,MAAA4F,UAAAnF,OAAAzL,GAAA,MAAAgB,IAAA,KAAA,IAAAZ,MAAAC,UAAAC,QAAA,cAAAQ,EAAA,KAAAH,EAAAH,GAAAG,GAAAH,EAAAC,EAAAoB,KAAAhB,EAAAE,IAAAJ,GAAAE,EAAAE,GAAAb,EAAAS,IAAAA,GAAAJ,EAAAM,GAAAE,GAAAb,EAAAS,GAAA,MAAA,IAAAA,GAAAF,EAAAoB,KAAAzB,KAAAmP,SAAAO,QAAA,GAAAnP,EAAAE,EAAA,IAAAJ,IACAL,KAAA4K,MAAA4F,WAAA3F,SAAA,SAAAjL,EAAAC,GAAA,MAAAG,MAAA4K,MAAAuF,OAAAtF,SAAAjL,EAAAC,EAAA,IAAAwL,OAAA,SAAAzL,GAAA,MAAAI,MAAA4K,MAAAuF,OAAA9E,OAAAzL,EAAA,KACAI,KAAA4K,MAAAmB,QAAAvJ,EAAA,mEAAAqI,SAAA,SAAAjL,EAAAC,EAAAC,GAAA,GAAAK,GAAA,GAAAC,EAAA,EAAAC,EAAAL,KAAA4K,MAAAmB,OAAAvJ,EAAAlC,EAAA,EAAAC,EAAAP,KAAAmP,SAAAM,UAAA7P,EAAA,KAAAE,IAAAO,EAAAA,EAAA8F,OAAA,EAAA,IAAA,MAAArG,EAAA,EAAA,EAAAK,EAAAJ,OAAAQ,GAAAJ,GAAAE,EAAAuH,QAAAtH,EAAAV,EAAAE,KAAAM,KAAA,IAAA,EAAAA,GAAAE,EAAAV,EAAAE,IAAA,EAAAM,EAAAA,GAAA,GAAAN,MAAAQ,IAAA,EAAAF,GAAA,EAAA,MAAA,EAAAD,EAAAJ,SAAAF,GAAAM,GAAA,GAAA,OAAAA,IAAAkL,OAAA,SAAAzL,EAAAC,GAAAD,EAAAA,EAAAoD,QAAA,QAAA,GAAA,IAAA7C,GAAAI,EAAAT,KAAAM,EAAA,EAAAC,EAAAL,KAAA4K,MAAAmB,OAAAvJ,EAAAlC,EAAA,CAAA,KAAAT,IAAAQ,EAAAA,EAAA8F,OAAA,EAAA,IAAA,MAAAhG,EAAA,EAAAA,EAAAP,EAAAG,OAAAI,IAAA,CACA,GADAI,EAAAF,EAAAiO,QAAA1O,EAAAgI,OAAAzH,IACA,EAAAI,EAAA,KAAA,IAAAP,MAAAC,UAAAC,QAAA,qBAAA,IAAAE,GAAAA,GAAA,GAAAN,EAAA2B,KAAAnB,EAAAC,IAAAH,GAAAE,EAAAC,GAAA,GAAAH,IAAAA,GAAA,EAAAE,GAAAC,GAAA,GAAAH,GAAA,MAAA,IAAAA,GAAAN,EAAA2B,KAAAzB,KAAAmP,SAAAO,QAAA,GAAAtP,EAAAE,EAAA,IAAAR,IAAAE,KAAA4K,MAAA6F,WAAA5F,SAAA,SAAAjL,GAAA,MAAAI,MAAA4K,MAAAmB,OAAAlB,SAAAjL,EAAA,EAAA,IAAAyL,OAAA,SAAAzL,GAAA,MAAAI,MAAA4K,MAAAmB,OAAAV,OAAAzL,EAAA,KAAAI,KAAAuH,KAAAmD,OAAA,SAAA9K,GAAAyF,KAAAxF,EAAA,IAAAwF,KAAA0J,IAAAnP,GAAAyF,KAAAjE,EAAAxB,EAAAwB,EAAA4N,MAAA,GAAA3J,KAAAhE,EAAAzB,EAAAyB,EAAA2N,MAAA,GAAA3J,KAAA5E,EAAAb,EAAAa,GAAA4E,KAAAqL,SAAA1Q,KAAAuH,KAAAmD,OAAAnD,KAAA,SAAA3H,GAAA,OAAA,GAAAI,MAAAuH,KAAAmD,QAAAiG,OAAA/Q,GAAAgR,YACA5Q,KAAAuH,KAAAmD,OAAAuE,WAAA4B,UAAA,IAAAH,MAAA,WAAA,MAAArL,MAAAjE,EAAAiE,KAAAyL,EAAA9B,MAAA,GAAA3J,KAAAhE,KAAAgE,KAAA5E,EAAA,EAAA4E,MAAAsL,OAAA,SAAA/Q,GAAA,gBAAAA,KAAAA,EAAAI,KAAA4K,MAAAQ,WAAAC,OAAAzL,GAAA,IAAAC,GAAAC,EAAAuF,KAAAhE,EAAArB,KAAAmP,SAAAhN,OAAAkD,KAAAhE,EAAAzB,EAAA,IAAAC,EAAAwF,KAAA5E,EAAAb,EAAAyF,KAAA5E,EAAAZ,EAAAG,KAAAmP,SAAAM,UAAA7P,GAAA,iBAAAA,EAAA,KAAA,IAAAI,MAAAC,UAAAC,QAAA,sCAAA,IAAA,mBAAA6Q,aAAA,CAAA,GAAA5Q,GAAA,GAAA4Q,aAAAjR,GAAAM,EAAA,CAAA,KAAAP,EAAA,IAAAA,GAAA,IAAAA,EAAA,KAAAA,GAAAD,EAAAC,GAAA,IAAAsB,EAAAkE,KAAAlF,EAAA6Q,SAAA,GAAA5Q,EACA,IAAAA,EAAA,KAAAA,GAAA,CAAAN,GAAAmR,OAAA,EAAA,GAAA7Q,OAAA,KAAAP,EAAA,IAAAA,GAAA,IAAAA,EAAA,KAAAA,GAAAD,EAAAC,GAAA,IAAAsB,EAAAkE,KAAAvF,EAAAmR,OAAA,EAAA,IAAA,OAAA5L,OAAAuL,SAAA,WAAA,GAAAhR,GAAAC,EAAAwF,KAAAhE,EAAAvB,EAAAuF,KAAAjE,EAAAvB,EAAAG,KAAAmP,SAAAhN,OAAAtC,GAAAG,KAAAmP,SAAAO,QAAA,EAAA,IAAA,KAAA9P,EAAAC,EAAAE,OAAA,EAAA,GAAAH,EAAAA,IAAAC,EAAA4B,KAAA,EAAA,KAAA5B,EAAA4B,KAAAmD,KAAA0D,MAAAjD,KAAA5E,EAAA,aAAAZ,EAAA4B,KAAA,EAAA4D,KAAA5E,GAAAZ,EAAAE,QAAAoB,EAAAkE,KAAAxF,EAAAoR,OAAA,EAAA,IAAA,OAAA5L,MAAAqL,QAAA5Q,GAAAgR,KAAAjR,KAAAkP,EAAA,WAAA,QAAAnP,GAAAA,GAAA,MAAA,aAAAA,EAAAgF,KAAA0D,MAAA1I,IAAA,EAAA,IAAA,GAAAO,GAAAC,EAAAP,EAAA,EAAAC,EAAA,EAAA,GAAAD,EAAAC,IAAA,CAAA,IAAAM,GAAA,EAAAD,EAAA,EAAAA,EAAAA,GAAAL,EAAAK,IAAA,GAAA,IAAAL,EAAAK,EAAA,CAAAC,GACA,CAAA,OAAAA,IAAA,EAAAP,IAAAwF,KAAAyL,EAAAjR,GAAAD,EAAAgF,KAAAsM,IAAApR,EAAA,MAAAuF,KAAAxF,EAAAA,GAAAD,EAAAgF,KAAAsM,IAAApR,EAAA,EAAA,IAAAD,QAGAG,KAAA0O,KAAAyC,KAAAC,KAAA,MAAAC,KAAAC,eAAA,SAAA1R,GAAAI,KAAA0O,KAAAyC,IAAAE,EAAA5P,KAAA7B,IAAA2R,iBAAA,SAAA3R,GAAAA,EAAAI,KAAA0O,KAAAyC,IAAAE,EAAA/C,QAAA1O,IAAA,EAAAA,GAAAI,KAAA0O,KAAAyC,IAAAE,EAAAJ,OAAArR,EAAA,IAAA4R,GAAA,SAAA5R,GAAA,GAAAE,GAAAD,EAAAG,KAAA0O,KAAAyC,IAAAE,EAAArC,OAAA,KAAAlP,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,GAAA,EAAAD,EAAAC,GAAAF,IAAA2C,QAAA,SAAA3C,EAAAC,EAAAC,EAAAK,EAAAC,GAAA,GAAAC,GAAAC,EAAAT,EAAAmP,MAAA,GAAAzO,EAAAP,KAAAmP,SAAA3O,EAAAD,EAAAkP,UAAA3P,GAAA,EAAAW,EAAAF,EAAAkP,UAAAnP,GAAA,CAAA,IAAAF,EAAAA,GAAA,GAAAD,EAAAA,MAAA,EAAAK,EAAA,KAAA,IAAAR,MAAAC,UAAAC,QAAA,mCAAA,KAAAG,EAAA,EAAA,EAAAA,GAAAI,IAAA,EAAAJ,EAAAA,KACA,MADAA,GAAA,GAAAG,IAAAH,EAAA,GAAAG,GAAAV,EAAAS,EAAA+O,MAAAxP,EACA,GAAA,GAAAO,IAAAR,EAAAG,KAAA0O,KAAAyC,IAAAM,EAAA7R,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAAC,EAAAN,KAAA0O,KAAAyC,IAAAzP,EAAA9B,EAAAU,EAAAR,EAAAD,EAAAO,EAAAC,GAAAE,EAAA4B,OAAA7B,EAAA6G,KAAA7G,EAAAoR,MAAAxC,QAAA,SAAAtP,EAAAC,EAAAC,EAAAK,EAAAC,GAAAA,EAAAA,GAAA,GAAAD,EAAAA,KAAA,IAAAE,GAAAL,KAAAmP,SAAA7O,EAAAD,EAAAoP,UAAA3P,GAAA,EAAAS,EAAAF,EAAAoP,UAAA5P,GAAAW,EAAAH,EAAAiP,MAAAzP,EAAAU,EAAAH,GAAAK,EAAAJ,EAAA+O,SAAAvP,EAAAU,EAAAH,GAAAG,GAAAA,EAAAH,GAAA,CAAA,IAAA,EAAAE,EAAA,KAAA,IAAAN,MAAAC,UAAAC,QAAA,mCAAA,KAAAL,EAAA,EAAA,EAAAA,GAAAU,IAAA,EAAAV,EAAAA,KAAA,GAAAA,EAAA,GAAAS,IAAAT,EAAA,GAAAS,GAAAR,EAAAO,EAAAiP,MAAAxP,EAAA,GAAA,GAAAD,IAAAW,EAAAR,KAAA0O,KAAAyC,IAAAzP,EAAA9B,EAAAY,EAAAV,EAAAW,EAAAL,EAAAP,GAAAD,EAAAI,KAAA0O,KAAAyC,IAAAM,EAAA7R,EAAAY,EAAA2G,KAAArH,EAAAK,EAAAC,EAAAP,IAAAQ,EAAAuP,MAAApP,EAAAkR,IAAA9R,GAAA,KAAA,IAAAI,MAAAC,UAAA0O,QAAA,yBACA,OAAAnO,GAAA2G,MAAAwK,GAAA,SAAA/R,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAA,GAAAC,MAAAC,EAAAP,KAAAmP,SAAA3O,EAAAD,EAAA4C,CAAA,IAAAhD,GAAAI,EAAAmP,QAAA,GAAA7P,EAAAE,OAAA,GAAA,GAAAI,EAAA,GAAA,EAAAE,EAAA,IAAAF,EAAAI,EAAA4B,OAAAhC,EAAAL,GAAAK,EAAA,IAAAC,EAAAD,EAAAP,EAAA2C,QAAApC,GAAAN,EAAAE,OAAA,IAAAD,EAAAS,EAAAkP,UAAA5P,GAAA,EAAA,OAAAC,EAAAQ,GAAAC,EAAAmP,QAAA,GAAA5P,IAAA,YAAAA,IAAAQ,EAAAC,EAAA4B,QAAA5B,EAAAmP,QAAA,GAAA,SAAA5P,KAAAQ,EAAAC,EAAA4B,OAAA7B,EAAAT,GAAAA,EAAA,EAAAA,EAAAS,EAAAP,OAAAF,GAAA,EAAAM,EAAAP,EAAA2C,QAAA/B,EAAAL,EAAAG,EAAA0O,MAAAnP,EAAAA,EAAA,GAAAsC,QAAA,EAAA,EAAA,KAAA,OAAAhC,IAAAsR,EAAA,SAAA7R,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAA,GAAAC,GAAAN,KAAAmP,SAAA5O,EAAAD,EAAA6C,CAAA,IAAA/C,GAAA,EAAAA,EAAA,GAAA,EAAAA,GAAA,GAAAA,EAAA,KAAA,IAAAJ,MAAAC,UAAAC,QAAA,0BACA,IAAA,WAAAC,EAAAJ,QAAA,WAAAF,EAAAE,OAAA,KAAA,IAAAC,MAAAC,UAAA4O,IAAA,yCAAA,KAAA/O,EAAAE,KAAA0O,KAAAyC,IAAAQ,GAAA/R,EAAAO,EAAAL,EAAAM,EAAAE,EAAAmP,UAAA5P,GAAA,EAAAQ,GAAAF,EAAA,EAAAA,EAAAN,EAAAE,OAAAI,GAAA,EAAAL,EAAAF,EAAA2C,QAAAhC,EAAAT,EAAAD,EAAAmP,MAAA7O,EAAAA,EAAA,GAAAgC,QAAA,EAAA,EAAA,KAAA,OAAA7B,GAAAgP,MAAAxP,EAAA,EAAAM,IAAAsB,EAAA,SAAA9B,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAA,GAAAC,GAAAC,EAAAP,KAAAmP,QAAA7O,GAAAC,EAAA4C,CAAA,IAAA3C,GAAAX,EAAAE,OAAAU,EAAAF,EAAAkP,UAAA5P,GAAAc,EAAAH,EAAA,GAAAE,EAAAC,CAAA,IAAAb,EAAAS,EAAA4B,QAAA5B,EAAAmP,QAAA,EAAArP,EAAA,IAAAP,GAAAqC,QAAA,EAAA,EAAA,IAAA6M,MAAA,EAAA,GAAA7O,EAAAI,EAAA6O,SAAA9O,EAAAH,EAAAP,EAAA2C,QAAAzC,IAAA,EAAAM,IAAAI,EAAA,OAAAkR,IAAAvR,EAAAgH,QAAA,KAAA7G,EAAA,EAAAA,EAAAE,EAAAF,GAAA,EAAAA,EAAAK,IAAAX,KAAA0O,KAAAyC,IAAAK,GAAAlR,EACAE,GAAAG,GAAAD,GAAAZ,EAAA,KAAAM,EAAAR,EAAA2C,QAAAzC,GAAAD,EAAAS,IAAAF,EAAA,GAAAP,EAAAS,EAAA,IAAAF,EAAA,GAAAP,EAAAS,EAAA,IAAAF,EAAA,GAAAP,EAAAS,EAAA,IAAAF,EAAA,EAAA,QAAAsR,IAAAvR,EAAAgH,KAAA5G,EAAA+O,MAAAzP,EAAAY,MACAT,KAAA0O,KAAAkD,MAAAR,KAAA,OAAA7O,QAAA,SAAA3C,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAA,GAAA,MAAAL,KAAAmP,SAAAM,UAAA3P,GAAA,KAAA,IAAAE,MAAAC,UAAAC,QAAA,0BAAA,IAAAI,GAAAC,EAAAP,KAAA0O,KAAAkD,KAAAC,EAAArR,EAAAR,KAAAmP,SAAA1O,EAAAD,EAAA2C,EAAAxC,GAAA,EAAA,EAAA,EAAA,EAAAb,GAAAS,EAAAX,EAAA2C,QAAAzC,GAAA,IAAAY,GAAAE,IAAA,KAAAT,EAAAA,MAAAC,EAAAA,GAAA,GAAAE,EAAA,EAAAA,EAAA,EAAAT,EAAAE,OAAAO,GAAA,EAAAI,EAAAb,EAAAmP,MAAA1O,EAAAA,EAAA,GAAAK,EAAAF,EAAAE,EAAAD,GAAAE,EAAAA,EAAAuB,OAAA1B,EAAAX,EAAAF,EAAA2C,QAAA9B,EAAAX,EAAAY,MAAAZ,EAAAS,EAAAT,EACA,OADAY,GAAAb,EAAAmP,MAAA1O,GAAAT,EAAAW,EAAAiP,UAAA/O,GAAAJ,EAAAV,EAAA2C,QAAA9B,EAAAX,GAAA,EAAA,EAAA,EAAAD,KAAAa,EAAAF,EAAA8O,MAAA7O,EAAAC,EAAAyB,QAAA,EAAA,EAAA,IAAA7B,GAAAT,GAAAc,EAAAF,EAAAE,EAAAF,EAAAC,EAAAyB,QAAA,EAAA,EAAA,IAAA7B,IAAAK,EAAAf,EAAA2C,QAAA9B,EAAAE,EAAAF,EAAAX,EAAAS,EAAAT,MACAK,EAAAJ,SAAAY,EAAAF,EAAAE,EAAAN,EAAAF,EAAAH,KAAA0O,KAAAkD,KAAAE,KAAAlS,EAAAO,KAAAS,EAAAuB,OAAA3B,EAAA2B,OAAAzB,EAAAF,EAAA8O,MAAA3O,EAAAP,MAAA8O,QAAA,SAAAtP,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAA,GAAA,MAAAL,KAAAmP,SAAAM,UAAA3P,GAAA,KAAA,IAAAE,MAAAC,UAAAC,QAAA,0BAAAE,GAAAA,GAAA,EAAA,IAAAM,GAAAE,EAAAN,EAAAN,KAAA0O,KAAAkD,KAAAC,EAAAtR,EAAAP,KAAAmP,SAAA3O,EAAAD,EAAA4C,EAAA1C,GAAA,EAAA,EAAA,EAAA,GAAAE,EAAAL,EAAAV,EAAA2C,QAAAzC,IAAAe,EAAAb,KAAAmP,SAAAM,UAAA5P,GAAAO,EAAAW,IAAA,KAAAZ,EAAAA,MAAAL,EAAA,EAAAA,EAAA,EAAAe,EAAA,GAAAf,GAAA,EAAAY,EAAAF,EAAAG,EAAAf,EAAAsP,QAAA1O,EAAAG,EAAAd,EAAAmP,MAAAlP,EAAAA,EAAA,MAAAW,EAAAD,EAAAC,EAAAC,GAAAK,EAAAA,EAAAoB,OAAAzB,GAAAC,EAAAL,EAAAK,EACA,IADAC,EAAAC,EAAA,GAAAf,EAAAY,EAAAd,EAAA2C,QAAA/B,EAAAG,GAAA,EAAA,EAAA,EAAAC,KAAAF,EAAAF,EAAAE,EAAAH,EAAA+O,MAAAzP,EAAAmP,MAAAlP,GAAAc,GAAAuB,QAAA,EACA,EAAA,KAAA1B,EAAAD,EAAAC,EAAAC,GAAAD,EAAAb,EAAA2C,QAAA/B,EAAAC,EAAAD,EAAAG,EAAAL,EAAAK,MAAAR,EAAAJ,SAAAU,EAAAD,EAAAC,EAAAJ,EAAAF,EAAAH,KAAA0O,KAAAkD,KAAAE,KAAAlS,EAAAO,MAAAI,EAAAqP,MAAArP,EAAA+O,MAAA7O,EAAAL,GAAAG,EAAA6O,SAAAvP,EAAAgB,IAAA,KAAA,IAAAb,MAAAC,UAAA0O,QAAA,yBAAA,OAAA5N,GAAAoB,OAAA5B,EAAA+O,MAAA5O,EAAAE,KAAAkR,KAAA,SAAAlS,EAAAC,GAAA,GAAAC,GAAAK,EAAAH,KAAA0O,KAAAkD,KAAAC,EAAAzR,EAAAJ,KAAAmP,SAAA9O,EAAAD,EAAA+C,EAAA7C,GAAA,EAAA,EAAA,EAAA,GAAAC,EAAAX,EAAA2C,SAAA,EAAA,EAAA,EAAA,IAAAhC,EAAAF,EAAAE,EAAAJ,EAAAA,EAAAI,IAAA,KAAAT,EAAA,EAAAA,EAAA,EAAAD,EAAAE,OAAAD,GAAA,EAAAS,EAAAJ,EAAAI,GAAAD,EAAAD,EAAAC,EAAAV,EAAA2C,QAAAlC,EAAAE,EAAAV,EAAAmP,MAAAlP,EAAAA,EAAA,KACA,OADAA,GAAAD,EAAAmP,MAAAlP,GAAA,IAAAM,EAAAqP,UAAA3P,KAAAS,EAAAF,EAAAE,EAAAJ,EAAAI,IAAAT,EAAAM,EAAA+B,OAAArC,IAAA,WAAA,EAAA,EAAA,KAAAQ,EAAAD,EAAAC,EAAAR,GACAF,EAAA2C,QAAAlC,EAAAF,EAAAE,EAAAE,EAAAJ,EAAAI,KAAAD,KAAAuR,EAAA,SAAAjS,GAAA,OAAAA,EAAA,IAAA,EAAAA,EAAA,KAAA,GAAAA,EAAA,IAAA,EAAAA,EAAA,KAAA,GAAAA,EAAA,IAAA,EAAAA,EAAA,KAAA,GAAAA,EAAA,IAAA,EAAA,KAAAA,EAAA,KAAA,OACAI,KAAA0O,KAAAqD,KAAAX,KAAA,MAAA7O,QAAA,SAAA3C,EAAAC,EAAAC,EAAAK,EAAAC,GAAA,GAAAC,GAAAR,EAAAmP,MAAA,EAAA,OAAAnP,GAAAG,KAAAmP,SAAAhP,EAAAA,MAAAP,EAAAI,KAAA0O,KAAAqD,IAAArQ,GAAA,EAAA9B,EAAAS,EAAAF,EAAAL,EAAAM,GAAA,KAAAP,EAAAsC,OAAAvC,EAAAuH,KAAAvH,EAAA8R,MAAAxC,QAAA,SAAAtP,EAAAC,EAAAC,EAAAK,EAAAC,GAAA,GAAAC,GAAAR,EAAAmP,MAAA,GAAA1O,EAAAN,KAAAmP,SAAA5O,EAAAD,EAAAmP,UAAApP,EAAA,IAAAD,EAAAA,GAAA,IAAAD,EAAAA,MAAAC,GAAAG,GAAAV,EAAAS,EAAA8O,SAAA/O,EAAAE,EAAAH,GAAAC,EAAAC,EAAA8O,SAAA/O,EAAA,EAAAE,EAAAH,KAAAP,EAAAQ,EAAAA,MAAAT,EAAAI,KAAA0O,KAAAqD,IAAArQ,GAAA,EAAA9B,EAAAS,EAAAF,EAAAL,EAAAM,IAAAE,EAAAsP,MAAAhQ,EAAA8R,IAAA7R,GAAA,KAAA,IAAAG,MAAAC,UAAA0O,QAAA,yBAAA,OAAA/O,GAAAuH,MAAA6K,GAAA,SAAApS,EAAAC,GAAA,GAAAC,GAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAP,KAAAmP,SAAAhM,CACA,KADA/C,GAAA,EAAA,EACA,EAAA,GAAAC,EAAAR,EAAAmP,MAAA,GAAAlP,EAAA,EAAA,IAAAA,EAAAA,IAAA,CAAA,KAAAK,EAAA,KAAAP,EAAAgF,KAAA0D,MAAAxI,EAAA,KAAA,GAAA,GAAAA,EAAA,OAAAM,EAAAG,EAAAH,EAAAC,IAAAC,EAAA,KAAA,EAAAD,EAAA,IAAAF,EAAA,EAAA,EAAAA,EAAAA,IAAAE,EAAAF,GAAAE,EAAAF,KAAA,GAAA,EAAAE,EAAAF,EAAA,KAAA,EAAAE,GAAA,MAAA,EAAAC,IAAAD,EAAA,KAAA,WAAA,MAAAD,IAAA4F,EAAA,SAAApG,EAAAC,EAAAC,GAAA,GAAAK,GAAAC,EAAAN,EAAAC,MAAA,KAAAF,EAAAA,EAAAmP,MAAA,GAAA7O,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EAAAN,EAAA,IAAA,WAAAC,EAAAK,GAAAN,EAAA,IAAA,WAAAC,EAAAK,EAAA,GAAAN,EAAA,IAAA,WAAAC,EAAAK,EAAA,GAAAN,EAAA,IAAA,WAAAC,EAAAK,EAAA,GAAAN,EAAAG,KAAA0O,KAAAqD,IAAAC,GAAAnS,EAAAD,EAAA,OAAAC,IAAA6B,EAAA,SAAA9B,EAAAC,EAAAC,EAAAK,EAAAC,EAAAC,GAAA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAE,EAAAD,EAAAE,EAAAC,EAAAE,EAAAf,KAAAmP,QACA,KADAzO,EAAAZ,EAAAC,OAAAa,EAAAG,EAAA0O,UAAA3P,GAAAe,EAAAE,EAAA0O,UAAAtP,GAAAI,EAAAQ,EAAA0O,UAAArP,GACAE,EAAAT,EAAA0C,SAAA,EAAA,EAAA,EAAA,IAAA,KAAAhC,GAAAH,EAAAA,EAAA4O,MAAA,GAAA5O,EAAAW,EAAAoB,OAAA/B,GAAA,MAAAA,EAAAJ,KAAA0O,KAAAqD,IAAA/L,EAAA1F,GAAA,EAAA,EAAA,EAAA,GAAAF,GAAAA,EAAAJ,KAAA0O,KAAAqD,IAAA/L,EAAA1F,EAAAF,GAAA,EAAA,EAAAwE,KAAA0D,MAAA/H,EAAA,YAAA,WAAAA,KAAAA,EAAAP,KAAA0O,KAAAqD,IAAA/L,EAAA1F,GAAA,EAAA,EAAA,EAAA,GAAAH,GAAAQ,EAAAP,EAAA4O,MAAA,GAAA7O,EAAAI,EAAAyO,MAAA,GAAApP,IAAAO,EAAAH,KAAA0O,KAAAqD,IAAA/L,EAAA1F,EAAAC,EAAAT,IAAAW,EAAA,EAAAA,EAAAC,EAAAD,GAAA,EAAAE,EAAA,KAAAH,EAAAX,EAAA0C,QAAA5B,GAAAb,EAAAW,IAAAD,EAAA,GAAAV,EAAAW,EAAA,IAAAD,EAAA,GAAAV,EAAAW,EAAA,IAAAD,EAAA,GAAAV,EAAAW,EAAA,IAAAD,EAAA,EACA,OADAV,GAAAiB,EAAAuO,MAAAxP,EAAAc,GAAAhB,IAAAO,EAAAH,KAAA0O,KAAAqD,IAAA/L,EAAA1F,EAAAC,EAAAT,IAAAF,GAAAgF,KAAA0D,MAAAzH,EAAA,YAAA,WAAAA,EAAA+D,KAAA0D,MAAA1H,EAAA,YAAA,WAAAA,GAAAT,EAAAH,KAAA0O,KAAAqD,IAAA/L,EAAA1F,EAAAH,EAAAP,GAAAY,EAAAX,EAAA0C,QAAAnC,GACAD,EAAA,IAAAK,EAAA,GAAAL,EAAA,IAAAK,EAAA,GAAAL,EAAA,IAAAK,EAAA,GAAAL,EAAA,IAAAK,EAAA,IAAAkR,IAAA3Q,EAAAqO,SAAAjP,EAAA,EAAAE,GAAA8G,KAAArH,KAAAE,KAAAgL,KAAAC,KAAA,SAAArL,EAAAC,GAAAwF,KAAA4M,EAAApS,EAAAA,GAAAG,KAAAuH,KAAAmD,MAAA,IAAAvK,GAAAL,UAAAM,EAAAP,EAAAoP,UAAA4B,UAAA,EAAA,KAAAxL,KAAApE,GAAA,GAAApB,GAAA,GAAAA,IAAAD,EAAAG,OAAAK,IAAAR,EAAAC,EAAA0H,KAAA3H,IAAAO,EAAA,EAAAA,EAAAC,EAAAD,IAAAL,EAAA,GAAAK,GAAA,UAAAP,EAAAO,GAAAL,EAAA,GAAAK,GAAA,WAAAP,EAAAO,EAAAkF,MAAApE,EAAA,GAAA0P,OAAA7Q,EAAA,IAAAuF,KAAApE,EAAA,GAAA0P,OAAA7Q,EAAA,IAAAuF,KAAA6M,EAAA,GAAArS,GAAAwF,KAAApE,EAAA,KACAjB,KAAAgL,KAAAC,KAAAgE,UAAA1M,QAAAvC,KAAAgL,KAAAC,KAAAgE,UAAAkD,IAAA,SAAAvS,GAAA,GAAAyF,KAAA+M,GAAA,KAAA,IAAApS,MAAAC,UAAAC,QAAA,0CAAA,OAAAmF,MAAAsL,OAAA/Q,GAAAyF,KAAAgN,OAAAzS,IAAAI,KAAAgL,KAAAC,KAAAgE,UAAAyB,MAAA,WAAArL,KAAA6M,EAAA,GAAA7M,MAAA4M,EAAA5M,KAAApE,EAAA,IAAAoE,KAAA+M,IAAA,GAAApS,KAAAgL,KAAAC,KAAAgE,UAAA0B,OAAA,SAAA/Q,GAAAyF,KAAA+M,IAAA,EAAA/M,KAAA6M,EAAAvB,OAAA/Q,IAAAI,KAAAgL,KAAAC,KAAAgE,UAAAoD,OAAA,WAAA,GAAAzS,GAAAyF,KAAA6M,EAAAtB,WAAAhR,EAAA,GAAAyF,MAAA4M,EAAA5M,KAAApE,EAAA,IAAA0P,OAAA/Q,GAAAgR,UAAA,OAAAvL,MAAAqL,QAAA9Q,GACAI,KAAAgL,KAAAO,OAAA,SAAA3L,EAAAC,EAAAC,EAAAK,EAAAC,GAAA,GAAAN,EAAAA,GAAA,IAAA,EAAAK,GAAA,EAAAL,EAAA,KAAA,IAAAE,MAAAC,UAAAC,QAAA,2BAAA,iBAAAN,KAAAA,EAAAI,KAAA4K,MAAAQ,WAAAC,OAAAzL,IAAA,gBAAAC,KAAAA,EAAAG,KAAA4K,MAAAQ,WAAAC,OAAAxL,IAAAO,EAAAA,GAAAJ,KAAAgL,KAAAC,KAAArL,EAAA,GAAAQ,GAAAR,EAAA,IAAAS,GAAAC,EAAAC,EAAAC,EAAAC,KAAAE,EAAAX,KAAAmP,QAAA,KAAA3O,EAAA,EAAA,GAAAC,EAAAV,QAAAI,GAAA,GAAAK,IAAA,CAAA,IAAAJ,EAAAC,EAAAT,EAAA2C,QAAA5B,EAAAwB,OAAAtC,GAAAW,KAAAF,EAAA,EAAAA,EAAAR,EAAAQ,IAAA,IAAAD,EAAAT,EAAA2C,QAAAlC,GAAAE,EAAA,EAAAA,EAAAF,EAAAN,OAAAQ,IAAAH,EAAAG,IAAAF,EAAAE,EAAAE,GAAAA,EAAA0B,OAAA/B,GAAA,MAAAD,KAAAM,EAAAE,EAAA2O,MAAA7O,EAAAN,IAAAM,GACAT,KAAAsS,KAAA,SAAA1S,GAAAyF,KAAAvF,GAAA,GAAAE,MAAAuH,KAAAmD,QAAArF,KAAA3E,GAAA,GAAA2E,KAAAkN,EAAA,EAAAlN,KAAAmN,KAAAnN,KAAAoN,EAAA,EAAApN,KAAAqN,KAAArN,KAAAsN,EAAAtN,KAAAhF,EAAAgF,KAAAuN,EAAAvN,KAAAwN,GAAA,EAAAxN,KAAAxF,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAAwF,KAAA9E,GAAA,EAAA,EAAA,EAAA,GAAA8E,KAAAjD,EAAA,OAAAiD,KAAAyN,EAAAlT,EAAAyF,KAAA0N,GAAA,EAAA1N,KAAA9D,GAAAyR,YAAAC,WAAA5N,KAAAlE,EAAAkE,KAAA6N,GAAA,EAAA7N,KAAA8N,EAAA,EAAA9N,KAAA+N,EAAA,EAAA/N,KAAAgO,GAAA,MAAAhO,KAAAiO,GAAA,EAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MAAAjO,KAAAkO,GAAA,IAAAlO,KAAAmO,GAAA,IACAxT,KAAAsS,KAAArD,WAAAtB,YAAA,SAAA/N,EAAAC,GAAA,GAAAM,GAAAL,IAAAK,GAAAkF,KAAAoO,QAAA5T,EAAA,IAAAO,EAAA,IAAAD,IAAAkF,KAAAlE,EAAA,KAAA,IAAAnB,MAAAC,UAAA6O,SAAA,yBAAA,IAAA3O,EAAAkF,KAAA+N,EAAA,CAAAjT,IAAAA,EAAAkF,KAAA8N,GAAA/S,IAAA,IAAAE,GAAAD,EAAA,CAAA,KAAAgF,KAAAsN,EAAAvS,EAAA,IAAA,GAAA2B,OAAAC,UAAAqD,KAAAkO,GAAAjT,EAAA,EAAA,GAAAA,EAAAA,IAAAF,EAAAqB,KAAA,WAAAmD,KAAAtD,SAAA,EAAA,KAAAhB,EAAA,EAAAA,EAAA+E,KAAAvF,EAAAC,SAAAK,EAAAA,EAAA+B,OAAAkD,KAAAvF,EAAAQ,GAAAsQ,YAAAvQ,GAAAgF,KAAA3E,EAAAJ,GAAA+E,KAAA3E,EAAAJ,GAAA,EAAAH,KAAAkF,KAAAkN,EAAA,GAAAjS,IAAAA,KACA,IADA+E,KAAAkN,GAAA,GAAAlN,KAAAvF,EAAAC,SAAAsF,KAAAvF,EAAA2B,KAAA,GAAAzB,MAAAuH,KAAAmD,QAAArF,KAAA3E,EAAAe,KAAA,IAAA4D,KAAAhF,GAAAA,EAAAA,EAAAgF,KAAAuN,IAAAvN,KAAAuN,EACAvS,GAAAgF,KAAAkN,IAAAlN,KAAAxF,EAAAG,KAAAuH,KAAAmD,OAAAnD,KAAAlC,KAAAxF,EAAAsC,OAAA/B,IAAAiF,KAAAjD,EAAA,GAAApC,MAAAqC,OAAAC,IAAA+C,KAAAxF,GAAAM,EAAA,EAAA,EAAAA,IAAAkF,KAAA9E,EAAAJ,GAAAkF,KAAA9E,EAAAJ,GAAA,EAAA,GAAAkF,KAAA9E,EAAAJ,IAAAA,MAAA,IAAAA,EAAA,EAAAA,EAAAP,EAAAO,GAAA,EAAA,KAAAA,EAAA,GAAAkF,KAAAgO,IAAApR,EAAAoD,MAAAjF,EAAA8B,EAAAmD,MAAAvF,EAAA2B,KAAArB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA,OAAA6B,GAAAoD,MAAAvF,EAAAkP,MAAA,EAAApP,IAAA8T,mBAAA,SAAA9T,EAAAC,GAAA,GAAA,IAAAD,GAAA,wEAAAC,EAAA,KAAA,IAAAG,MAAAC,UAAAC,QAAA,sEAAAmF,MAAAyN,EAAAlT,GAAAkC,WAAA,SAAAlC,EACAC,EAAAC,GAAAA,EAAAA,GAAA,MAAA,IAAAK,GAAAC,EAAAC,GAAA,GAAA0B,OAAAC,UAAA1B,EAAA+E,KAAAmN,EAAA1S,GAAAS,EAAA8E,KAAAoO,UAAAjT,EAAA,CAAA,QAAAL,EAAAkF,KAAAqN,EAAA5S,GAAA,SAAAK,IAAAA,EAAAkF,KAAAqN,EAAA5S,GAAAuF,KAAAwN,MAAA,SAAAvS,IAAAA,EAAA+E,KAAAmN,EAAA1S,GAAA,GAAAuF,KAAAmN,EAAA1S,IAAAuF,KAAAmN,EAAA1S,GAAA,GAAAuF,KAAAvF,EAAAC,aAAAH,IAAA,IAAA,SAAA,SAAAC,IAAAA,EAAA,GAAAwF,KAAAvF,EAAAQ,GAAAqQ,QAAAxQ,EAAAkF,KAAAoN,IAAA,EAAA5S,EAAAQ,EAAA,EAAA,EAAAT,GAAA,MAAA,KAAA,SAAA,GAAAE,EAAA6T,OAAA1E,UAAAxL,SAAAmQ,KAAAhU,GAAA,yBAAAE,EAAA,CAAA,IAAAM,KAAAN,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAAM,EAAAqB,KAAA7B,EAAAE,GAAAF,GAAAQ,MAAA,KAAA,mBAAAN,IAAAU,EAAA,GAAAV,EAAA,EAAAA,EAAAF,EAAAG,SAAAS,EAAAV,IAAA,gBAAAF,GAAAE,KACAU,EAAA,EAAA,KAAAA,EAAA,CAAA,GAAA,SAAAX,EAAA,IAAAC,EAAAD,EAAA,EAAAC,EAAAF,EAAAG,OAAAD,IAAA,IAAAM,EAAAR,EAAAE,GAAA,EAAAM,GAAAP,IAAAO,KAAA,CAAAiF,MAAAvF,EAAAQ,GAAAqQ,QAAAxQ,EAAAkF,KAAAoN,IAAA,EAAA5S,EAAAQ,EAAAT,EAAAG,QAAAoC,OAAAvC,IAAA,KAAA,KAAA,SAAA,SAAAC,IAAAA,EAAAD,EAAAG,QAAAsF,KAAAvF,EAAAQ,GAAAqQ,QAAAxQ,EAAAkF,KAAAoN,IAAA,EAAA5S,EAAAQ,EAAAT,EAAAG,SAAAsF,KAAAvF,EAAAQ,GAAAqQ,OAAA/Q,EAAA,MAAA,SAAAY,EAAA,EAAA,GAAAA,EAAA,KAAA,IAAAR,MAAAC,UAAA4O,IAAA,sEAAAxJ,MAAA3E,EAAAJ,IAAAT,EAAAwF,KAAAhF,GAAAR,EAAAU,IAAA8E,KAAAlE,IAAAkE,KAAAoO,YAAApO,KAAAlE,GAAAE,EAAA,SAAAuD,KAAAiP,IAAAxO,KAAAuN,EAAAvN,KAAAhF,IAAAgB,EAAA,WAAAgE,KAAAyO,iBACAL,QAAA,SAAA7T,GAAA,MAAAA,GAAAyF,KAAAiO,EAAA,SAAA1T,EAAAA,EAAAyF,KAAAyN,GAAAzN,KAAAuN,GAAAvN,KAAAuN,GAAAhT,EAAAyF,KAAA3E,EAAA,GAAA2E,KAAAmO,KAAA,GAAAzR,OAAAC,UAAAqD,KAAAsN,EAAAtN,KAAA+N,EAAA/N,KAAA8N,EAAA9N,KAAA8N,EAAA9N,KAAAhF,GAAAT,EAAAyF,KAAA+N,EAAA/N,KAAAlE,EAAAkE,KAAAlE,GAAA2S,YAAA,SAAAlU,GAAA,MAAAA,GAAAyF,KAAAiO,EAAA1T,EAAAA,EAAAyF,KAAAyN,GAAAzN,KAAAuN,GAAAhT,EAAA,EAAAyF,KAAAhF,EAAAT,EAAA,EAAAyF,KAAAhF,EAAAT,GAAAmU,gBAAA,WAAA,IAAA1O,KAAA0N,EAAA,CAAA,GAAA1N,KAAAzF,GAAAoU,kBAAAxR,EAAA6C,KAAAA,KAAA4O,IAAAC,eAAA1R,EAAA6C,KAAAA,KAAA8O,IAAAC,kBAAA5R,EAAA6C,KAAAA,KAAAgP,IAAAC,uBAAA9R,EAAA6C,KAAAA,KAAAkP,IAAAC,eAAAhS,EAAA6C,KAAAA,KAAAoP,KAAA9S,OAAA+S,iBAAA/S,OAAA+S,iBAAA,OACArP,KAAAzF,EAAAoU,mBAAA,GAAArS,OAAA+S,iBAAA,YAAArP,KAAAzF,EAAAsU,gBAAA,GAAAvS,OAAA+S,iBAAA,WAAArP,KAAAzF,EAAAwU,mBAAA,GAAAzS,OAAA+S,iBAAA,eAAArP,KAAAzF,EAAA0U,wBAAA,GAAA3S,OAAA+S,iBAAA,YAAArP,KAAAzF,EAAA4U,gBAAA,OAAA,CAAA,IAAAvG,SAAA0G,YAAA,KAAA,IAAA3U,MAAAC,UAAA4O,IAAA,qBAAAZ,UAAA0G,YAAA,SAAAtP,KAAAzF,EAAAoU,mBAAA/F,SAAA0G,YAAA,cAAAtP,KAAAzF,EAAAsU,gBAAAjG,SAAA0G,YAAA,WAAAtP,KAAAzF,EAAAwU,mBACA/O,KAAA0N,GAAA,IAAA6B,eAAA,WAAAvP,KAAA0N,IAAApR,OAAAkT,qBAAAlT,OAAAkT,oBAAA,OAAAxP,KAAAzF,EAAAoU,mBAAA,GAAArS,OAAAkT,oBAAA,YAAAxP,KAAAzF,EAAAsU,gBAAA,GAAAvS,OAAAkT,oBAAA,WAAAxP,KAAAzF,EAAAwU,mBAAA,GAAAzS,OAAAkT,oBAAA,eAAAxP,KAAAzF,EAAA0U,wBAAA,GAAA3S,OAAAkT,oBAAA,YAAAxP,KAAAzF,EAAA4U,gBAAA,IAAAvG,SAAA6G,cAAA7G,SAAA6G,YAAA,SAAAzP,KAAAzF,EAAAoU,mBAAA/F,SAAA6G,YAAA,cACAzP,KAAAzF,EAAAsU,gBAAAjG,SAAA6G,YAAA,WAAAzP,KAAAzF,EAAAwU,oBAAA/O,KAAA0N,GAAA,IAAA2B,iBAAA,SAAA9U,EAAAC,GAAAwF,KAAA9D,EAAA3B,GAAAyF,KAAA6N,MAAArT,GAAAgV,oBAAA,SAAAjV,EAAAC,GAAA,GAAAC,GAAAK,EAAAC,EAAAiF,KAAA9D,EAAA3B,GAAAS,IAAA,KAAAF,IAAAC,GAAAA,EAAAoB,eAAArB,IAAAC,EAAAD,KAAAN,GAAAQ,EAAAoB,KAAAtB,EAAA,KAAAL,EAAA,EAAAA,EAAAO,EAAAN,OAAAD,IAAAK,EAAAE,EAAAP,SAAAM,GAAAD,IAAAkU,GAAA,WAAA3S,EAAA2D,KAAA,IAAA8O,GAAA,SAAAvU,GAAA,GAAAC,GAAAC,CAAA,KAAAD,EAAAD,EAAAsB,GAAAtB,EAAAmV,SAAAnV,EAAAoV,SAAA,EAAAlV,EAAAF,EAAAqC,GAAArC,EAAAqV,SAAArV,EAAAsV,SAAA,EAAA,MAAA/U,GAAAL,EAAAD,EAAA,EAAA,GAAAA,GAAA,GAAAC,GAAAuF,KAAAvD,YAAAjC,EAAAC,GAAA,EAAA,SAAA4B,EAAA2D,KAAA,IAAAoP,GAAA,SAAA7U,GAAAA,EACAA,EAAAuV,QAAA,IAAAvV,EAAAwV,eAAA,GAAA/P,KAAAvD,YAAAlC,EAAAyV,OAAAzV,EAAAmV,QAAAnV,EAAA0V,OAAA1V,EAAAqV,SAAA,EAAA,SAAAvT,EAAA2D,KAAA,IAAA4O,GAAA,WAAAvS,EAAA2D,KAAA,IAAAkP,GAAA,SAAA3U,GAAA,GAAAA,EAAAA,EAAA2V,6BAAArU,GAAAtB,EAAA2V,6BAAAtT,GAAArC,EAAA2V,6BAAArT,EAAAP,OAAA6T,YAAA,CAAA,GAAA3V,GAAA8B,OAAA6T,WAAA,iBAAA3V,IAAAwF,KAAAvD,WAAAjC,EAAA,EAAA,iBAAAD,GAAAyF,KAAAvD,WAAAlC,EAAA,EAAA,iBAAA8B,EAAA2D,KAAA,KAEArF,KAAAsB,OAAA,GAAAtB,MAAAsS,KAAA,EACA1S,GAAA,IAAA,GAAAmT,GAAA0C,EAAArU,EAAAiQ,CAAA,IAAAA,EAAA,mBAAAqE,SAAAA,OAAAC,QAAA,CAAA,GAAAnD,EAAA,KAAAA,EAAAoD,QAAA,UAAA,MAAAhW,GAAA4S,EAAA,KAAAnB,EAAAoE,EAAAjD,EAAA,GAAAnB,GAAAoE,EAAAI,YAAA9C,EAAA0C,EAAAI,YAAA,KAAA9C,EAAA,GAAAhC,aAAA,GAAA+E,YAAA/C,GAAAgD,QAAA/V,KAAAsB,OAAAQ,WAAAiR,EAAA,KAAA,6BAAA,IAAA,mBAAApR,SAAA,mBAAAoP,aAAA,CAAA,GAAA3P,EAAA,GAAA2P,aAAA,IAAApP,OAAAqU,QAAArU,OAAAqU,OAAAC,gBAAAtU,OAAAqU,OAAAC,gBAAA7U,OAAA,CAAA,IAAAO,OAAAuU,WAAAvU,OAAAuU,SAAAD,gBACA,KAAArW,EADA+B,QAAAuU,SAAAD,gBAAA7U,GACApB,KAAAsB,OAAAQ,WAAAV,EAAA,KAAA,8BAAA,MAAAxB,GAAA,mBAAA+B,SAAAA,OAAA0I,UAAAA,QAAA7B,IAAA,2DAAA6B,QAAA7B,IAAA5I,IC7CA,GD8CAI,KAAAmW,MAAAC,UAAApV,EAAA,EAAAqV,KAAA,IAAAC,GAAA,IAAAC,GAAA,GAAA7H,KAAA,MAAA8H,MAAA,GAAAnU,OAAA,OAAAoU,GAAA,SAAA7W,EAAAC,EAAAC,EAAAK,GAAAL,EAAAA,MAAAK,EAAAA,KAAA,IAAAG,GAAAF,EAAAJ,KAAAmW,KAAA9V,EAAAD,EAAAE,GAAAoW,GAAA1W,KAAAsB,OAAAqM,YAAA,EAAA,IAAAvN,EAAAgW,SAAA,IAAAhW,EAAAE,EAAAD,EAAAP,GAAAA,EAAAO,EAAAmW,MAAA,gBAAAnW,GAAAwD,OAAAxD,EAAAwD,KAAA7D,KAAA4K,MAAAmB,OAAAV,OAAAhL,EAAAwD,OAAA,gBAAAxD,GAAAqW,KAAArW,EAAAqW,GAAA1W,KAAA4K,MAAAmB,OAAAV,OAAAhL,EAAAqW,MAAA1W,KAAA0O,KAAArO,EAAAqO,QAAA1O,KAAAqC,OAAAhC,EAAAgC,SAAA,gBAAAzC,IAAA,KAAAS,EAAAgW,MAAA,KAAAhW,EAAAkW,IAAA,KAAAlW,EAAAkW,IAAA,MAAAlW,EAAAkW,IAAA,MAAAlW,EAAAiW,IAAA,MAAAjW,EAAAiW,IAAA,MAAAjW,EAAAiW,IAAA,EAAAjW,EAAAqW,GAAA3W,QACA,EAAAM,EAAAqW,GAAA3W,OAAA,KAAA,IAAAC,MAAAC,UAAAC,QAAA,mCACA,OADA,gBAAAN,IAAAU,EAAAN,KAAAgL,KAAA2L,aAAA/W,EAAAS,GAAAT,EAAAU,EAAA4G,IAAA8H,MAAA,EAAA3O,EAAAiW,GAAA,IAAAjW,EAAAwD,KAAAvD,EAAAuD,MAAA7D,KAAA4W,KAAAhX,YAAAI,MAAA4W,IAAAC,QAAAC,YAAAxW,EAAAV,EAAAmX,MAAA1W,EAAA2W,OAAA1W,EAAAoR,IAAA9R,EAAAU,EAAA4G,IAAA8H,MAAA,EAAA3O,EAAAiW,GAAA,KAAA,gBAAAzW,KAAAA,EAAAG,KAAA4K,MAAAQ,WAAAC,OAAAxL,IAAA,gBAAAC,KAAAO,EAAAmW,MAAA1W,EAAAE,KAAA4K,MAAAQ,WAAAC,OAAAvL,IAAAQ,EAAA,GAAAN,MAAAqC,OAAAhC,EAAAgC,QAAAzC,GAAAQ,EAAAE,EAAAH,EAAAE,GAAAF,EAAA+G,IAAAtH,EAAAS,EAAA4W,GAAA,QAAA5W,EAAAqO,MAAA1O,KAAAkX,aAAAlX,KAAAkX,YAAA/F,KACAtR,YAAAsX,aAAAnX,KAAAkX,YAAA/F,IAAA5O,QAAAjC,EAAAT,EAAAQ,EAAAqW,GAAA5W,EAAAO,EAAAkW,IAAAvW,KAAA0O,KAAArO,EAAAqO,MAAAnM,QAAAjC,EAAAT,EAAAQ,EAAAqW,GAAA5W,EAAAO,EAAAkW,IAAAlW,GAAAkC,QAAA,SAAA3C,EAAAC,EAAAC,EAAAK,GAAA,GAAAC,GAAAJ,KAAAmW,KAAA9V,EAAAD,EAAAqW,GAAAhU,MAAArC,EAAAsC,UAAA,OAAAtC,GAAAgX,OAAA/W,IAAAgX,GAAA,SAAAzX,EAAAC,EAAAC,EAAAK,GAAAL,EAAAA,MAAAK,EAAAA,KAAA,IAAAC,GAAAJ,KAAAmW,IAAAtW,GAAAO,EAAAE,EAAAF,EAAAE,EAAAF,EAAAE,KAAAF,EAAAgW,UAAAvW,GAAAC,GAAA,EAAA,IAAAO,GAAAC,CAAA,IAAAD,EAAAR,EAAA2W,MAAA,gBAAA3W,GAAAgE,OAAAhE,EAAAgE,KAAA7D,KAAA4K,MAAAmB,OAAAV,OAAAxL,EAAAgE,OAAA,gBAAAhE,GAAA6W,KAAA7W,EAAA6W,GAAA1W,KAAA4K,MAAAmB,OAAAV,OAAAxL,EAAA6W,MAAA1W,KAAA0O,KAAA7O,EAAA6O,QAAA1O,KAAAqC,OAAAxC,EAAAwC,SAAA,gBACAzC,IAAA,KAAAC,EAAAwW,MAAA,KAAAxW,EAAA0W,IAAA,KAAA1W,EAAA0W,IAAA,MAAA1W,EAAA0W,IAAA,MAAA1W,EAAAyW,IAAA,MAAAzW,EAAAyW,IAAA,MAAAzW,EAAAyW,KAAAzW,EAAA6W,IAAA,EAAA7W,EAAA6W,GAAA3W,QAAA,EAAAF,EAAA6W,GAAA3W,OAAA,KAAA,IAAAC,MAAAC,UAAAC,QAAA,mCACA,OADA,gBAAAN,IAAAU,EAAAN,KAAAgL,KAAA2L,aAAA/W,EAAAC,GAAAD,EAAAU,EAAA4G,IAAA8H,MAAA,EAAAnP,EAAAyW,GAAA,IAAAzW,EAAAgE,KAAAvD,EAAAuD,MAAA7D,KAAA4W,KAAAhX,YAAAI,MAAA4W,IAAAC,QAAAS,YAAA1X,EAAAA,EAAA2X,MAAAvX,KAAA4K,MAAAmB,OAAAV,OAAAxL,EAAAmX,SAAAhI,MAAA,EAAAnP,EAAAyW,GAAA,KAAA,gBAAAjW,KAAAA,EAAAL,KAAA4K,MAAAQ,WAAAC,OAAAhL,IAAAC,EAAA,GAAAN,MAAAqC,OAAAxC,EAAAwC,QAAAzC,GAAAS,EAAA,QACAR,EAAA6O,MAAA1O,KAAAkX,aAAAlX,KAAAkX,YAAA/F,KAAAtR,EAAAoX,aAAAE,aAAAnX,KAAAkX,YAAA/F,IAAAjC,QAAA5O,EAAAT,EAAAoX,GAAApX,EAAA6W,GAAA7W,EAAA6R,IAAArR,EAAAR,EAAA0W,IAAAvW,KAAA0O,KAAA7O,EAAA6O,MAAAQ,QAAA5O,EAAAT,EAAAoX,GAAApX,EAAA6W,GAAArW,EAAAR,EAAA0W,IAAAnW,EAAAE,EAAAH,EAAAN,GAAAM,EAAA+G,IAAAtH,EAAA,IAAAE,EAAA0X,IAAAnX,EAAAL,KAAA4K,MAAAQ,WAAAP,SAAAxK,IAAA6O,QAAA,SAAAtP,EAAAC,EAAAC,EAAAK,GAAA,GAAAC,GAAAJ,KAAAmW,IAAA,OAAA/V,GAAAiX,GAAAzX,EAAAQ,EAAAqX,OAAA5X,GAAAC,EAAAK,IAAAiX,OAAA,SAAAxX,GAAA,GAAAC,GAAAC,EAAA,IAAAK,EAAA,EAAA,KAAAN,IAAAD,GAAA,GAAAA,EAAA4B,eAAA3B,GAAA,CAAA,IAAAA,EAAAiO,MAAA,gBAAA,KAAA,IAAA9N,MAAAC,UAAAC,QAAA;AACA,OADAJ,GAAAK,EAAA,IACAN,EAAA,KAAAM,EAAA,UAAAP,GAAAC,IAAA,IAAA,SAAA,IAAA,UAAAC,GAAAF,EAAAC,EAAA,MAAA,KAAA,SAAAC,GAAA,IAAAkQ,OAAApQ,EAAAC,IAAA,GAAA,MAAA,KAAA,SAAAC,GAAA,IAAAE,KAAA4K,MAAAmB,OAAAlB,SAAAjL,EAAAC,GAAA,GAAA,GAAA,MAAA,SAAA,KAAA,IAAAG,MAAAC,UAAA4O,IAAA,kCAAA,MAAA/O,GAAA,KAAA2X,OAAA,SAAA7X,GAAA,GAAAA,EAAAA,EAAAoD,QAAA,MAAA,KAAApD,EAAAkO,MAAA,YAAA,KAAA,IAAA9N,MAAAC,UAAAC,QAAA,gCAAAN,GAAAA,EAAAoD,QAAA,WAAA,IAAAC,MAAA,IAAA,IAAAnD,GAAAK,EAAAN,IAAA,KAAAC,EAAA,EAAAA,EAAAF,EAAAG,OAAAD,IAAA,CAAA,KAAAK,EAAAP,EAAAE,GAAAgO,MAAA,gGAAA,KAAA,IAAA9N,MAAAC,UAAAC,QAAA,gCACA,OAAAC,EAAA,GAAAN,EAAAM,EAAA,IAAAoN,SAAApN,EAAA,GAAA,IAAA,MAAAA,EAAA,GAAAN,EAAAM,EAAA,IAAAA,EAAA,GAAA2N,MAAA,wBAAA9N,KAAA4K,MAAAmB,OAAAV,OAAAlL,EAAA,IAAA8P,SAAA9P,EAAA,IAAA,MAAAA,EAAA,KAAAN,EAAAM,EAAA,IAAA,SAAAA,EAAA,IAAA,MAAAN,IAAAS,EAAA,SAAAV,EAAAC,EAAAC,GAAA,GAAA,SAAAF,IAAAA,MAAA,SAAAC,EAAA,MAAAD,EAAA,KAAA,GAAAO,KAAAN,GAAA,GAAAA,EAAA2B,eAAArB,GAAA,CAAA,GAAAL,GAAA,SAAAF,EAAAO,IAAAP,EAAAO,KAAAN,EAAAM,GAAA,KAAA,IAAAH,MAAAC,UAAAC,QAAA,gCAAAN,GAAAO,GAAAN,EAAAM,GAAA,MAAAP,IAAA8X,GAAA,SAAA9X,EAAAC,GAAA,GAAAM,GAAAL,IAAA,KAAAK,IAAAP,GAAAA,EAAA4B,eAAArB,IAAAP,EAAAO,KAAAN,EAAAM,KAAAL,EAAAK,GAAAP,EAAAO,GAAA,OAAAL,IAAA6X,GAAA,SAAA/X,EACAC,GAAA,GAAAM,GAAAL,IAAA,KAAAK,EAAA,EAAAA,EAAAN,EAAAE,OAAAI,IAAA,SAAAP,EAAAC,EAAAM,MAAAL,EAAAD,EAAAM,IAAAP,EAAAC,EAAAM,IAAA,OAAAL,KAAAE,KAAAuC,QAAAvC,KAAAmW,KAAA5T,QAAAvC,KAAAkP,QAAAlP,KAAAmW,KAAAjH,QAAAlP,KAAAgL,KAAA4M,MAAA5X,KAAAgL,KAAA2L,aAAA,SAAA/W,EAAAC,GAAA,GAAAM,GAAAL,EAAAE,KAAAgL,KAAA4M,EAAA,OAAA/X,GAAAA,MAAAM,EAAAN,EAAAwW,MAAA,IAAAvW,EAAAA,EAAAF,GAAAE,EAAAF,OAAAO,EAAAL,EAAAK,GAAAL,EAAAK,KAAA0X,UAAAhY,EAAAgE,MAAAhE,EAAAgE,KAAA9D,OAAAF,EAAAgE,KAAAmL,MAAA,GAAAhP,KAAAsB,OAAAqM,YAAA,EAAA,IAAA7N,EAAA,SAAAD,EAAAgE,KAAA1D,EAAA0X,UAAAhY,EAAAgE,KAAA1D,EAAAL,GAAAK,EAAAL,IAAAE,KAAAgL,KAAAO,OAAA3L,EAAAE,EAAAD,EAAAwW,OAAAnP,IAAA/G,EAAAL,GAAAkP,MAAA,GAAAnL,KAAA/D,EAAAkP,MAAA,KACA,mBAAA0G,SAAAA,OAAAC,UAAAD,OAAAC,QAAA3V,MAAA,kBAAA8X,SAAAA,UAAA,WAAA,MAAA9X,SCtDA2B,OAAA0B,KAAA,CACA,GAAA0U,UAAA,mEACAC,MAAAD,SAAA9U,MAAA,GAEAtB,QAAA0B,KAAA,SAAA0I,GACA,GAAA,kBAAAkM,KAAAlM,GAAA,KAAA,IAAAmM,OAAA,uCACAnM,GAAAA,EAAA/I,QAAA,KAAA,GACA,IAAArC,GAAA,EAAAoL,EAAAhM,MACA,IAAA,IAAAY,EAAA,KAAA,IAAAuX,OAAA,uCACA,KAAA,GAAA/U,GAAA,EAAA6C,EAAA,EAAA+B,EAAAgE,EAAAhM,OAAA,EAAAqD,KAAAD,EAAA4E,IAAA5E,EAAA,CACA,GAAAvD,GAAAmY,SAAAzJ,QAAAvC,EAAA/F,MAAA,KAAAnG,EAAAkY,SAAAzJ,QAAAvC,EAAA/F,MAAA,KACAlG,EAAAiY,SAAAzJ,QAAAvC,EAAA/F,MAAA,KAAA7F,EAAA4X,SAAAzJ,QAAAvC,EAAA/F,MAAA,IACA,KAAApG,EAAAC,EAAAC,EAAAK,GAAA,EAAA,KAAA,IAAA+X,OAAA,uCACA9U,GAAAA,EAAArD,QAAA,KAAAH,GAAA,EAAAC,GAAA,GACAuD,EAAAA,EAAArD,QAAA,KAAAF,GAAA,EAAAC,GAAA,GACAsD,EAAAA,EAAArD,QAAA,KAAAD,GAAA,EAAAK,GAEA,MAAA2C,QAAAC,aAAAN,MAAA,KAAAW,GAAA+C,OAAA,EAAA/C,EAAArD,OAAAY,EAAA,IAGAgB,OAAAkB,KAAA,SAAAO,GACA,IAAA,GAAAD,GAAA,EAAA6C,EAAA,EAAA+B,EAAA3E,EAAArD,OAAA,EAAAgM,KAAA5I,EAAA4E,IAAA5E,EAAA,CACA,GAAAvD,GAAAwD,EAAAI,WAAAwC,KAAAnG,EAAAuD,EAAAI,WAAAwC,KAAAlG,EAAAsD,EAAAI,WAAAwC,IACA,KAAApG,EAAAC,EAAAC,GAAA,IAAA,KAAA,IAAAoY,OAAA,uCACAnM,GAAAA,EAAAhM,QAAAiY,MAAApY,GAAA,GAAAoY,MAAApY,GAAA,EAAA,GAAAC,GAAA,IACAyN,MAAAzN,GAAA,IAAAmY,MAAAnY,GAAA,EAAA,GAAAC,GAAA,KACAwN,MAAAzN,EAAAC,GAAA,IAAAkY,MAAA,GAAAlY,IAEA,MAAAiM,GAAArI,KAAA,KEpBA,GAAA+D,SAAA,EACAI,OAAA","file":"page-specific-password-gen.min.js","sourcesContent":["\"use strict\";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return\"CORRUPT: \"+this.message};this.message=a},invalid:function(a){this.toString=function(){return\"INVALID: \"+this.message};this.message=a},bug:function(a){this.toString=function(){return\"BUG: \"+this.message};this.message=a},notReady:function(a){this.toString=function(){return\"NOT READY: \"+this.message};this.message=a}}};\nsjcl.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl.exception.invalid(\"invalid aes key size\");this.b=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d[a]=d[a-b]^c}for(b=0;a;b++,a--)c=d[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&\n255]]};\nsjcl.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d=b[4],e,f,g,h=[],k=[],l,n,m,p;for(e=0;0x100>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d[m]=f,n=h[e=h[l=h[f]]],p=0x1010101*n^0x10001*e^0x101*l^0x1010100*f,n=0x101*h[m]^0x1010100*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8;for(e=\ne;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};\nfunction t(a,b,c){if(4!==b.length)throw new sjcl.exception.invalid(\"invalid aes block size\");var d=a.b[c],e=b[0]^d[0],f=b[c?3:1]^d[1],g=b[2]^d[2];b=b[c?1:3]^d[3];var h,k,l,n=d.length/4-2,m,p=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v=h[2],w=h[3],x=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v[g>>8&255]^w[b&255]^d[p],k=a[f>>>24]^q[g>>16&255]^v[b>>8&255]^w[e&255]^d[p+1],l=a[g>>>24]^q[b>>16&255]^v[e>>8&255]^w[f&255]^d[p+2],b=a[b>>>24]^q[e>>16&255]^v[f>>8&255]^w[g&255]^d[p+3],p+=4,e=h,f=k,g=l;for(m=\nm;m++)r[c?3&-m:m]=x[e>>>24]<<24^x[f>>16&255]<<16^x[g>>8&255]<<8^x[b&255]^d[p++],h=e,e=f,f=g,g=b,b=h;return r}\nsjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return 32===d?a.concat(b):sjcl.bitArray.$(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===\nb?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+0x10000000000*a},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return!1;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return 0===\n  c},$:function(a,b,c,d){var e;e=0;for(void 0===d&&(d=[]);32<=b;b-=32)d.push(c),c=0;if(0===b)return d.concat(a);for(e=0;e<a.length;e++)d.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d.pop(),1));return d},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&0xff00|(c&0xff00)<<8|c<<24;return a}};\nsjcl.codec.utf8String={fromBits:function(a){var b=\"\",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++)0===(d&3)&&(e=a[d/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++)d=d<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d),d=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};\nsjcl.codec.hex={fromBits:function(a){var b=\"\",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\\s|0x/g,\"\");d=a.length;a=a+\"00000000\";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d)}};\nsjcl.codec.base32={B:\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",X:\"0123456789ABCDEFGHIJKLMNOPQRSTUV\",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=\"\",g=0,h=sjcl.codec.base32.B,k=0,l=sjcl.bitArray.bitLength(a);c&&(h=sjcl.codec.base32.X);for(c=0;f.length*d<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d?(k=a[c]<<d-g,g+=e,c++):(k<<=d,g-=d);for(;f.length&7&&!b;)f+=\"=\";return f},toBits:function(a,b){a=a.replace(/\\s|=/g,\"\").toUpperCase();var c=sjcl.codec.base32.BITS,\n  d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=[],g,h=0,k=sjcl.codec.base32.B,l=0,n,m=\"base32\";b&&(k=sjcl.codec.base32.X,m=\"base32hex\");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl.codec.base32hex.toBits(a)}catch(p){}throw new sjcl.exception.invalid(\"this isn't \"+m+\"!\");}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d,l^=n<<c-h)}h&56&&f.push(sjcl.bitArray.partial(h&56,l,1));return f}};\nsjcl.codec.base32hex={fromBits:function(a,b){return sjcl.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl.codec.base32.toBits(a,1)}};\nsjcl.codec.base64={B:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",fromBits:function(a,b,c){var d=\"\",e=0,f=sjcl.codec.base64.B,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+\"-_\");for(c=0;6*d.length<h;)d+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d.length&3&&!b;)d+=\"=\";return d},toBits:function(a,b){a=a.replace(/\\s|=/g,\"\");var c=[],d,e=0,f=sjcl.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+\"-_\");for(d=0;d<a.length;d++){h=f.indexOf(a.charAt(d));\n  if(0>h)throw new sjcl.exception.invalid(\"this isn't base64!\");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize()};\nsjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){\"string\"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.A=sjcl.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl.bitArray.bitLength(a);if(0x1fffffffffffff<a)throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");if(\"undefined\"!==typeof Uint32Array){var d=new Uint32Array(c),e=0;for(b=512+b-(512+b&0x1ff);b<=a;b+=512)u(this,d.subarray(16*e,\n  16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&0x1ff);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/0x100000000));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a){return 0x100000000*(a-Math.floor(a))|0}for(var b=0,c=2,d,e;64>b;c++){e=!0;for(d=2;d*d<=c;d++)if(0===c%d){e=\n  !1;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};\nfunction u(a,b){var c,d,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d=b[c]:(d=b[c+1&15],e=b[c+14&15],d=b[c&15]=(d>>>7^d>>>18^d>>>3^d<<25^d<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d=d+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p^r))+g[c],q=r,r=p,p=m,m=n+d|0,n=l,l=k,k=h,h=d+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p|0;f[6]=f[6]+r|0;f[7]=\n  f[7]+q|0}\nsjcl.mode.ccm={name:\"ccm\",G:[],listenProgress:function(a){sjcl.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl.mode.ccm.G.indexOf(a);-1<a&&sjcl.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d=d||[];if(7>k)throw new sjcl.exception.invalid(\"ccm: iv must be at least 7 bytes\");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,\n  8*(15-f));b=sjcl.mode.ccm.V(a,b,c,d,e,f);g=sjcl.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl.exception.invalid(\"ccm: iv must be at least 7 bytes\");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl.mode.ccm.C(a,k,c,l,e,b);a=sjcl.mode.ccm.V(a,k.data,c,d,e,b);if(!f.equal(k.tag,a))throw new sjcl.exception.corrupt(\"ccm: tag doesn't match\");\n  return k.data},na:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,k=h.i;d=[h.partial(8,(b.length?64:0)|d-2<<2|f-1)];d=h.concat(d,c);d[3]|=e;d=a.encrypt(d);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:0xffffffff>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d=a.encrypt(k(d,g.slice(b,b+4).concat([0,0,0])));return d},V:function(a,b,c,d,e,f){var g=sjcl.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl.exception.invalid(\"ccm: invalid tag length\");\n  if(0xffffffff<d.length||0xffffffff<b.length)throw new sjcl.exception.bug(\"ccm: can't deal with 4GiB or more data\");c=sjcl.mode.ccm.na(a,d,c,e,g.bitLength(b)/8,f);for(d=0;d<b.length;d+=4)c=a.encrypt(h(c,b.slice(d,d+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!k)return{tag:d,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl.mode.ccm.fa(g/\n  k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d,data:h.clamp(b,l)}}};\nsjcl.mode.ocb2={name:\"ocb2\",encrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid(\"ocb iv must be 128 bits\");var g,h=sjcl.mode.ocb2.S,k=sjcl.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p=p.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));\n  d.length&&(n=l(n,f?d:sjcl.mode.ocb2.pmac(a,d)));return p.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid(\"ocb iv must be 128 bits\");e=e||64;var g=sjcl.mode.ocb2.S,h=sjcl.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p,r=sjcl.bitArray.bitLength(b)-e,q=[];d=d||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p=r-32*c;m=a.encrypt(k(n,[0,0,0,p]));m=k(m,h.clamp(b.slice(c),p).concat([0,\n  0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d.length&&(l=k(l,f?d:sjcl.mode.ocb2.pmac(a,d)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl.exception.corrupt(\"ocb: tag doesn't match\");return q.concat(h.clamp(m,p))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.S,e=sjcl.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4)h=d(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);\n  return a.encrypt(f(d(f(h,d(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};\nsjcl.mode.gcm={name:\"gcm\",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;d=d||[];a=sjcl.mode.gcm.C(!0,a,f,d,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.C(!1,a,f,d,c,e);if(!g.equal(a.tag,b))throw new sjcl.exception.corrupt(\"gcm: tag doesn't match\");return a.data},ka:function(a,b){var c,d,e,f,g,h=sjcl.bitArray.i;e=[0,0,\n  0,0];f=b.slice(0);for(c=0;128>c;c++){(d=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d=3;0<d;d--)f[d]=f[d]>>>1|(f[d-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-0x1f000000)}return e},j:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4)b[0]^=0xffffffff&c[d],b[1]^=0xffffffff&c[d+1],b[2]^=0xffffffff&c[d+2],b[3]^=0xffffffff&c[d+3],b=sjcl.mode.gcm.ka(b,a);return b},C:function(a,b,c,d,e,f){var g,h,k,l,n,m,p,r,q=sjcl.bitArray;m=c.length;p=q.bitLength(c);r=q.bitLength(d);h=q.bitLength(e);\n  g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl.mode.gcm.j(g,[0,0,0,0],e),e=sjcl.mode.gcm.j(g,e,[0,0,Math.floor(h/0x100000000),h&0xffffffff]));h=sjcl.mode.gcm.j(g,[0,0,0,0],d);n=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p);a&&(d=sjcl.mode.gcm.j(g,h,c));a=[Math.floor(r/0x100000000),r&0xffffffff,Math.floor(p/0x100000000),p&0xffffffff];d=sjcl.mode.gcm.j(g,d,a);k=b.encrypt(e);\n  d[0]^=k[0];d[1]^=k[1];d[2]^=k[2];d[3]^=k[3];return{tag:q.bitSlice(d,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.W=b=b||sjcl.hash.sha256;var c=[[],[]],d,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d=0;d<e;d++)c[0][d]=a[d]^909522486,c[1][d]=a[d]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};\nsjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=!1};sjcl.misc.hmac.prototype.update=function(a){this.aa=!0;this.R.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=(new this.W(this.w[1])).update(a).finalize();this.reset();return a};\nsjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1E4;if(0>d||0>c)throw new sjcl.exception.invalid(\"invalid params to pbkdf2\");\"string\"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));\"string\"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl.bitArray;for(k=1;32*l.length<(d||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d&&(l=n.clamp(l,d));return l};\nsjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=!1;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=0x10000;this.T=[0,48,64,96,128,192,0x100,384,512,768,1024];this.da=3E4;this.ba=80};\nsjcl.prng.prototype={randomWords:function(a,b){var c=[],d;d=this.isReady(b);var e;if(d===this.u)throw new sjcl.exception.notReady(\"generator isn't seeded\");if(d&this.J){d=!(d&this.I);e=[];var f=0,g;this.Z=e[0]=(new Date).valueOf()+this.da;for(g=0;16>g;g++)e.push(0x100000000*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=\n  f);this.P++;this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.L=new sjcl.cipher.aes(this.b);for(d=0;4>d&&(this.h[d]=this.h[d]+1|0,!this.h[d]);d++);}for(d=0;d<a;d+=4)0===(d+1)%this.ca&&y(this),e=z(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&\"Setting paranoia=0 will ruin your security; use it only for testing\"!==b)throw new sjcl.exception.invalid(\"Setting paranoia=0 will ruin your security; use it only for testing\");this.M=a},addEntropy:function(a,\nb,c){c=c||\"user\";var d,e,f=(new Date).valueOf(),g=this.H[c],h=this.isReady(),k=0;d=this.U[c];void 0===d&&(d=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case \"number\":void 0===b&&(b=1);this.c[g].update([d,this.N++,1,b,f,1,a|0]);break;case \"object\":c=Object.prototype.toString.call(a);if(\"[object Uint32Array]\"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for(\"[object Array]\"!==c&&(k=1),c=0;c<a.length&&!k;c++)\"number\"!==typeof a[c]&&\n(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d,this.N++,2,b,f,a.length].concat(a))}break;case \"string\":void 0===b&&(b=a.length);this.c[g].update([d,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A(\"seeded\",Math.max(this.o,this.f)),A(\"progress\",this.getProgress()))},\n  isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&(new Date).valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener(\"load\",\n    this.a.loadTimeCollector,!1),window.addEventListener(\"mousemove\",this.a.mouseCollector,!1),window.addEventListener(\"keypress\",this.a.keyboardCollector,!1),window.addEventListener(\"devicemotion\",this.a.accelerometerCollector,!1),window.addEventListener(\"touchmove\",this.a.touchCollector,!1);else if(document.attachEvent)document.attachEvent(\"onload\",this.a.loadTimeCollector),document.attachEvent(\"onmousemove\",this.a.mouseCollector),document.attachEvent(\"keypress\",this.a.keyboardCollector);else throw new sjcl.exception.bug(\"can't attach event\");\n    this.D=!0}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener(\"load\",this.a.loadTimeCollector,!1),window.removeEventListener(\"mousemove\",this.a.mouseCollector,!1),window.removeEventListener(\"keypress\",this.a.keyboardCollector,!1),window.removeEventListener(\"devicemotion\",this.a.accelerometerCollector,!1),window.removeEventListener(\"touchmove\",this.a.touchCollector,!1)):document.detachEvent&&(document.detachEvent(\"onload\",this.a.loadTimeCollector),document.detachEvent(\"onmousemove\",\n    this.a.mouseCollector),document.detachEvent(\"keypress\",this.a.keyboardCollector)),this.D=!1)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d,e=this.K[a],f=[];for(d in e)e.hasOwnProperty(d)&&e[d]===b&&f.push(d);for(c=0;c<f.length;c++)d=f[c],delete e[d]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,\"mouse\");C(this,0)},qa:function(a){a=\n    a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,\"touch\");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;\"number\"===typeof b&&this.addEntropy(b,1,\"accelerometer\")}a&&this.addEntropy(a,2,\"accelerometer\");C(this,0)}};\nfunction A(a,b){var c,d=sjcl.random.K[a],e=[];for(c in d)d.hasOwnProperty(c)&&e.push(d[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){\"undefined\"!==typeof window&&window.performance&&\"function\"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,\"loadtime\"):a.addEntropy((new Date).valueOf(),b,\"loadtime\")}function y(a){a.b=z(a).concat(z(a));a.L=new sjcl.cipher.aes(a.b)}function z(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}\nfunction B(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);\na:try{var D,E,F,G;if(G=\"undefined\"!==typeof module&&module.exports){var H;try{H=require(\"crypto\")}catch(a){H=null}G=E=H}if(G&&E.randomBytes)D=E.randomBytes(128),D=new Uint32Array((new Uint8Array(D)).buffer),sjcl.random.addEntropy(D,1024,\"crypto['randomBytes']\");else if(\"undefined\"!==typeof window&&\"undefined\"!==typeof Uint32Array){F=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F);\nelse break a;sjcl.random.addEntropy(F,1024,\"crypto['getRandomValues']\")}}catch(a){\"undefined\"!==typeof window&&window.console&&(console.log(\"There was an error collecting entropy from the browser:\"),console.log(a))}\nsjcl.json={defaults:{v:1,iter:1E4,ks:128,ts:64,mode:\"ccm\",adata:\"\",cipher:\"aes\"},ja:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.g({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;\"string\"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));\"string\"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||\"string\"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&0x100!==f.ks||2>f.iv.length||\n  4<f.iv.length)throw new sjcl.exception.invalid(\"json encrypt: invalid parameters\");\"string\"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));\"string\"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));\"string\"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.g(d,f);d.key=a;f.ct=\"ccm\"===f.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&\nb instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d){var e=sjcl.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.g(e.g(e.g({},e.defaults),b),c,!0);var f,g;f=b.adata;\"string\"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));\"string\"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||\"string\"===\n  typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&0x100!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl.exception.invalid(\"json decrypt: invalid parameters\");\"string\"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));\"string\"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f=\"ccm\"===\nb.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d,b);d.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d){var e=sjcl.json;return e.ia(a,e.decode(b),c,d)},encode:function(a){var b,c=\"{\",d=\"\";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid(\"json encode: invalid property name\");c+=d+'\"'+\n  b+'\":';d=\",\";switch(typeof a[b]){case \"number\":case \"boolean\":c+=a[b];break;case \"string\":c+='\"'+escape(a[b])+'\"';break;case \"object\":c+='\"'+sjcl.codec.base64.fromBits(a[b],0)+'\"';break;default:throw new sjcl.exception.bug(\"json encode: unsupported type\");}}return c+\"}\"},decode:function(a){a=a.replace(/\\s/g,\"\");if(!a.match(/^\\{.*\\}$/))throw new sjcl.exception.invalid(\"json decode: this isn't json!\");a=a.replace(/^\\{|\\}$/g,\"\").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^\\s*(?:([\"']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|\"([a-z0-9+\\/%*_.@=\\-]*)\"|(true|false))$/i)))throw new sjcl.exception.invalid(\"json decode: this isn't json!\");\n  null!=d[3]?b[d[2]]=parseInt(d[3],10):null!=d[4]?b[d[2]]=d[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]):null!=d[5]&&(b[d[2]]=\"true\"===d[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d in b)if(b.hasOwnProperty(d)){if(c&&void 0!==a[d]&&a[d]!==b[d])throw new sjcl.exception.invalid(\"required parameter overridden\");a[d]=b[d]}return a},sa:function(a,b){var c={},d;for(d in a)a.hasOwnProperty(d)&&a[d]!==b[d]&&(c[d]=a[d]);return c},ra:function(a,\nb){var c={},d;for(d=0;d<b.length;d++)void 0!==a[b[d]]&&(c[b[d]]=a[b[d]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.pa={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.pa,d;b=b||{};d=b.iter||1E3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=void 0===b.salt?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};\n\"undefined\"!==typeof module&&module.exports&&(module.exports=sjcl);\"function\"===typeof define&&define([],function(){return sjcl});","/*\n * Licence: cc by-sa 3.0 (https://creativecommons.org/licenses/by-sa/3.0)\n * Source: http://stackoverflow.com/questions/23190056/hex-to-base64-converter-for-javascript\n * Author: coder hacker (http://stackoverflow.com/users/2277510/coder-hacker)\n */\nif (!window.atob) {\n  var tableStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var table = tableStr.split(\"\");\n\n  window.atob = function (base64) {\n    if (/(=[^=]+|={3,})$/.test(base64)) throw new Error(\"String contains an invalid character\");\n    base64 = base64.replace(/=/g, \"\");\n    var n = base64.length & 3;\n    if (n === 1) throw new Error(\"String contains an invalid character\");\n    for (var i = 0, j = 0, len = base64.length / 4, bin = []; i < len; ++i) {\n      var a = tableStr.indexOf(base64[j++] || \"A\"), b = tableStr.indexOf(base64[j++] || \"A\");\n      var c = tableStr.indexOf(base64[j++] || \"A\"), d = tableStr.indexOf(base64[j++] || \"A\");\n      if ((a | b | c | d) < 0) throw new Error(\"String contains an invalid character\");\n      bin[bin.length] = ((a << 2) | (b >> 4)) & 255;\n      bin[bin.length] = ((b << 4) | (c >> 2)) & 255;\n      bin[bin.length] = ((c << 6) | d) & 255;\n    }\n    return String.fromCharCode.apply(null, bin).substr(0, bin.length + n - 4);\n  };\n\n  window.btoa = function (bin) {\n    for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {\n      var a = bin.charCodeAt(j++), b = bin.charCodeAt(j++), c = bin.charCodeAt(j++);\n      if ((a | b | c) > 255) throw new Error(\"String contains an invalid character\");\n      base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +\n                              (isNaN(b) ? \"=\" : table[((b << 2) & 63) | (c >> 6)]) +\n                              (isNaN(b + c) ? \"=\" : table[c & 63]);\n    }\n    return base64.join(\"\");\n  };\n\n}\n\nfunction hexToBase64(str) {\n  return btoa(String.fromCharCode.apply(null,\n    str.replace(/\\r|\\n/g, \"\").replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \").replace(/ +$/, \"\").split(\" \"))\n  );\n}\n\nfunction base64ToHex(str) {\n  for (var i = 0, bin = atob(str.replace(/[ \\r\\n]+$/, \"\")), hex = []; i < bin.length; ++i) {\n    var tmp = bin.charCodeAt(i).toString(16);\n    if (tmp.length === 1) tmp = \"0\" + tmp;\n    hex[hex.length] = tmp;\n  }\n  return hex.join(\" \");\n}\n\n","/*\n * JavaScript implementation of Password-Based Key Derivation Function 2\n * (PBKDF2) as defined in RFC 2898.\n * Version 1.5 \n * Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013 Parvez Anandam\n * parvez@anandam.com\n * http://anandam.com/pbkdf2\n *\n * Distributed under the BSD license\n *\n * Uses Paul Johnston's excellent SHA-1 JavaScript library sha1.js:\n * http://pajhome.org.uk/crypt/md5/sha1.html\n * (uses the binb_sha1(), rstr2binb(), binb2str(), rstr2hex() functions from that libary)\n *\n * Thanks to Felix Gartsman for pointing out a bug in version 1.0\n * Thanks to Thijs Van der Schaeghe for pointing out a bug in version 1.1 \n * Thanks to Richard Gautier for asking to clarify dependencies in version 1.2\n * Updated contact information from version 1.3\n * Thanks to Stuart Heinrich for pointing out updates to PAJ's SHA-1 library in version 1.4\n */\n\n\n/*\n * The four arguments to the constructor of the PBKDF2 object are \n * the password, salt, number of iterations and number of bytes in\n * generated key. This follows the RFC 2898 definition: PBKDF2 (P, S, c, dkLen)\n *\n * The method deriveKey takes two parameters, both callback functions:\n * the first is used to provide status on the computation, the second\n * is called with the result of the computation (the generated key in hex).\n *\n * Example of use:\n *\n *    <script src=\"sha1.js\"></script>\n *    <script src=\"pbkdf2.js\"></script>\n *    <script>\n *    var mypbkdf2 = new PBKDF2(\"mypassword\", \"saltines\", 1000, 16);\n *    var status_callback = function(percent_done) {\n *        document.getElementById(\"status\").innerHTML = \"Computed \" + percent_done + \"%\"};\n *    var result_callback = function(key) {\n *        document.getElementById(\"status\").innerHTML = \"The derived key is: \" + key};\n *    mypbkdf2.deriveKey(status_callback, result_callback);\n *    </script>\n *    <div id=\"status\"></div>\n *\n */\n\nfunction PBKDF2(password, salt, num_iterations, num_bytes)\n{\n\t// Remember the password and salt\n\tvar m_bpassword = rstr2binb(password);\n\tvar m_salt = salt;\n\n\t// Total number of iterations\n\tvar m_total_iterations = num_iterations;\n\n\t// Run iterations in chunks instead of all at once, so as to not block.\n\t// Define size of chunk here; adjust for slower or faster machines if necessary.\n\tvar m_iterations_in_chunk = 10;\n\n\t// Iteration counter\n\tvar m_iterations_done = 0;\n\n\t// Key length, as number of bytes\n\tvar m_key_length = num_bytes;\n\n\t// The hash cache\n\tvar m_hash = null;\n\n\t// The length (number of bytes) of the output of the pseudo-random function.\n\t// Since HMAC-SHA1 is the standard, and what is used here, it's 20 bytes.\n\tvar m_hash_length = 20;\n\n\t// Number of hash-sized blocks in the derived key (called 'l' in RFC2898)\n\tvar m_total_blocks = Math.ceil(m_key_length/m_hash_length);\n\n\t// Start computation with the first block\n\tvar m_current_block = 1;\n\n\t// Used in the HMAC-SHA1 computations\n\tvar m_ipad = new Array(16);\n\tvar m_opad = new Array(16);\n\n\t// This is where the result of the iterations gets sotred\n\tvar m_buffer = [0x0,0x0,0x0,0x0,0x0];\n\t\n\t// The result\n\tvar m_key = \"\";\n\n\t// This object\n\tvar m_this_object = this;\n\n\t// The function to call with the result\n\tvar m_result_func;\n\n\t// The function to call with status after computing every chunk\n\tvar m_status_func;\n\t\n\tvar m_stopped = false;\n\t\n\t// Set up the HMAC-SHA1 computations\n\tif (m_bpassword.length > 16) m_bpassword = binb_sha1(m_bpassword, password.length * chrsz);\n\tfor(var i = 0; i < 16; ++i)\n\t{\n\t\tm_ipad[i] = m_bpassword[i] ^ 0x36363636;\n\t\tm_opad[i] = m_bpassword[i] ^ 0x5C5C5C5C;\n\t}\n\n\n\t// Starts the computation\n\tthis.deriveKey = function(status_callback, result_callback)\n\t{\n\t\tm_status_func = status_callback;\n\t\tm_result_func = result_callback;\n\t\tsetTimeout(function() { m_this_object.do_PBKDF2_iterations() }, 0);\n\t};\n\t\n\n\t// The workhorse\n\tthis.do_PBKDF2_iterations = function()\n\t{\n\t\tif (m_stopped) {\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\t\n\t\tvar iterations = m_iterations_in_chunk;\n\t\tif (m_total_iterations - m_iterations_done < m_iterations_in_chunk)\n\t\t\titerations = m_total_iterations - m_iterations_done;\n\t\t\t\n\t\tfor(var i=0; i<iterations; ++i)\n\t\t{\n\t\t\t// compute HMAC-SHA1 \n\t\t\tif (m_iterations_done == 0)\n\t\t\t{\n\t\t\t\tvar salt_block = m_salt +\n\t\t\t\t\t\tString.fromCharCode(m_current_block >> 24 & 0xF) +\n\t\t\t\t\t\tString.fromCharCode(m_current_block >> 16 & 0xF) +\n\t\t\t\t\t\tString.fromCharCode(m_current_block >>  8 & 0xF) +\n\t\t\t\t\t\tString.fromCharCode(m_current_block       & 0xF);\n\n\t\t\t\tm_hash = binb_sha1(m_ipad.concat(rstr2binb(salt_block)),\n\t\t\t\t\t\t\t\t   512 + salt_block.length * 8);\n\t\t\t\tm_hash = binb_sha1(m_opad.concat(m_hash), 512 + 160);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_hash = binb_sha1(m_ipad.concat(m_hash), \n\t\t\t\t\t\t\t\t   512 + m_hash.length * 32);\n\t\t\t\tm_hash = binb_sha1(m_opad.concat(m_hash), 512 + 160);\n\t\t\t}\n\n        \tfor(var j=0; j<m_hash.length; ++j)\n                \tm_buffer[j] ^= m_hash[j];\n\n\t\t\tm_iterations_done++;\n\t\t}\n\n\t\t// Call the status callback function\n\n\t\tif (m_iterations_done < m_total_iterations)\n\t\t{\n\t\t\tsetTimeout(function() { m_this_object.do_PBKDF2_iterations() }, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (m_current_block < m_total_blocks)\n\t\t\t{\n\t\t\t\t// Compute the next block (T_i in RFC 2898)\n\t\t\t\tif (m_status_func != null)\n\t\t\t\t\tm_status_func( (m_current_block - 1 + m_iterations_done/m_total_iterations) / m_total_blocks * 100);\n\t\t\t\t\n\t\t\t\tm_key += rstr2hex(binb2rstr(m_buffer));\n\t\t\t\n\t\t\t\tm_current_block++;\n\t\t\t\tm_buffer = [0x0,0x0,0x0,0x0,0x0];\n\t\t\t\tm_iterations_done = 0;\n\n\t\t\t\tsetTimeout(function() { m_this_object.do_PBKDF2_iterations() }, 0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We've computed the final block T_l; we're done.\n\t\t\t\n\t\t\t\tvar tmp = rstr2hex(binb2rstr(m_buffer));\n\t\t\t\tm_key += tmp.substr(0, (m_key_length - (m_total_blocks - 1) * m_hash_length) * 2 );\n\t\t\t\t\n\t\t\t\t// Call the result callback function\n\t\t\t\tm_result_func(m_key);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tm_stopped = true;\n\t}\n}\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad  = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\nfunction hex_hmac_sha1(k, d)\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction b64_hmac_sha1(k, d)\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction any_hmac_sha1(k, d, e)\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction sha1_vm_test()\n{\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n\n/*\n * Calculate the SHA1 of a raw string\n */\nfunction rstr_sha1(s)\n{\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\nfunction rstr_hmac_sha1(key, data)\n{\n  var bkey = rstr2binb(key);\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n\n  var ipad = Array(16), opad = Array(16);\n  for(var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input)\n{\n  try { hexcase } catch(e) { hexcase=0; }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for(var i = 0; i < input.length; i++)\n  {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\n           +  hex_tab.charAt( x        & 0x0F);\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input)\n{\n  try { b64pad } catch(e) { b64pad=''; }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for(var i = 0; i < len; i += 3)\n  {\n    var triplet = (input.charCodeAt(i) << 16)\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\n    for(var j = 0; j < 4; j++)\n    {\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding)\n{\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for(i = 0; i < dividend.length; i++)\n  {\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */\n  while(dividend.length > 0)\n  {\n    quotient = Array();\n    x = 0;\n    for(i = 0; i < dividend.length; i++)\n    {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if(quotient.length > 0 || q > 0)\n        quotient[quotient.length] = q;\n    }\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for(i = remainders.length - 1; i >= 0; i--)\n    output += encoding.charAt(remainders[i]);\n\n  /* Append leading zero equivalents */\n  var full_length = Math.ceil(input.length * 8 /\n                                    (Math.log(encoding.length) / Math.log(2)));\n  for(i = output.length; i < full_length; i++)\n    output = encoding[0] + output;\n\n  return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input)\n{\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while(++i < input.length)\n  {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\n    {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if(x <= 0x7F)\n      output += String.fromCharCode(x);\n    else if(x <= 0x7FF)\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0xFFFF)\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0x1FFFFF)\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\n                                    0x80 | ((x >>> 12) & 0x3F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n  }\n  return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\n  return output;\n}\n\nfunction str2rstr_utf16be(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\n                                   input.charCodeAt(i)        & 0xFF);\n  return output;\n}\n\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binb(input)\n{\n  var output = Array(input.length >> 2);\n  for(var i = 0; i < output.length; i++)\n    output[i] = 0;\n  for(var i = 0; i < input.length * 8; i += 8)\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\n  return output;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2rstr(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length * 32; i += 8)\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\n  return output;\n}\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction binb_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for(var j = 0; j < 80; j++)\n    {\n      if(j < 16) w[j] = x[i + j];\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if(t < 20) return (b & c) | ((~b) & d);\n  if(t < 40) return b ^ c ^ d;\n  if(t < 60) return (b & c) | (b & d) | (c & d);\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}","var mypbkdf2 = null;\n\nvar passwordLib = (function () {\n\t\"use strict\";\n\treturn {\n\t\tcalculatePasswordSjclPbkdf2: calculatePasswordSjclPbkdf2,\n\t\tcalculatePassword: calculatePassword,\n\t\tcalculatePasswordOld: calculatePasswordOld,\n\t\trandomHash: randomHash,\n\t\tgetBaseUrl: getBaseUrl,\n\t\tgetDomain: getDomain,\n\t\tgetDefaultOptions: getDefaultOptions\n\t};\n\n\n\tfunction calculatePasswordSjclPbkdf2(originalPassword, url, options) {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar intOptions = getDefaultOptions();\n\n\t\t\tif (typeof options !== 'undefined') {\n\t\t\t\t// Merge the options\n\t\t\t\tfor (var attrname in options) {\n\t\t\t\t\tintOptions[attrname] = options[attrname];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.verbose)\n\t\t\t\tconsole.log('calculatePassword', 'url:', url, 'options:', intOptions);\n\n\n\t\t\tif (originalPassword.trim() == '') {\n\t\t\t\t// Skip calculation for an empty password\n\t\t\t\tresolve('');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar domain = getDomain(url);\n\n\t\t\tvar out = sjcl.hash.sha256.hash(getBaseUrl(domain));\n\t\t\tvar salt = sjcl.codec.hex.fromBits(out);\n\t\t\tif (options.salt) {\n\t\t\t\tsalt = options.salt + salt;\n\t\t\t}\n\n\t\t\tif (options.verbose)\n\t\t\t\tconsole.log('calculatePassword, salt:', salt);\n\n\t\t\t// Encrypt password using the original password and the given salt value\n\t\t\tvar iterations = intOptions.iterations + (salt.length + originalPassword.length + 1);\n\n\n\t\t\tvar hmacSHA1 = function (key) {\n\t\t\t\tvar hasher = new sjcl.misc.hmac( key, sjcl.hash.sha1 );\n\t\t\t\tthis.encrypt = function () {\n\t\t\t\t\treturn hasher.encrypt.apply( hasher, arguments );\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tvar passwordSalt = sjcl.codec.utf8String.toBits(salt);\n\t\t\toriginalPassword = sjcl.codec.hex.toBits(originalPassword);\n\t\t\tvar derivedKey = sjcl.misc.pbkdf2( originalPassword, passwordSalt, iterations, 512, hmacSHA1 );\n\t\t\tvar hexKey = sjcl.codec.hex.fromBits( derivedKey );\n\t\t\tcalculatePasswordInternal(hexKey, salt, intOptions, resolve, reject);\n\n\t\t});\n\n\t}\n\n\n\tfunction calculatePassword(originalPassword, url, options) {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar intOptions = getDefaultOptions();\n\n\t\t\tif (typeof options !== 'undefined') {\n\t\t\t\t// Merge the options\n\t\t\t\tfor (var attrname in options) {\n\t\t\t\t\tintOptions[attrname] = options[attrname];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.verbose)\n\t\t\t\tconsole.log('calculatePassword', 'url:', url, 'options:', intOptions);\n\n\n\t\t\tif (originalPassword.trim() == '') {\n\t\t\t\t// Skip calculation for an empty password\n\t\t\t\tresolve('');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar domain = getDomain(url);\n\t\t\tvar salt = getBaseUrl(domain);\n\n\t\t\tif (options.verbose)\n\t\t\t\tconsole.log('calculatePassword, salt:', salt);\n\n\t\t\t// Encrypt password using the original password and the given salt value\n\t\t\tvar iterations = intOptions.iterations + (salt.length + originalPassword.length + 1);\n\n\t\t\tif (mypbkdf2 != null)\n\t\t\t\tmypbkdf2.stop();\n\n\t\t\tmypbkdf2 = new PBKDF2(originalPassword, salt, iterations, 128);\n\n\t\t\tvar intResultCallback = function (key) {\n\t\t\t\tcalculatePasswordInternal(key, salt, intOptions, resolve, reject);\n\t\t\t};\n\t\t\tmypbkdf2.deriveKey(options.statusCallback, intResultCallback);\n\n\t\t});\n\n\t}\n\n\tfunction calculatePasswordInternal(key, salt, options, resultCallback, rejectCallback) {\n\t\tvar base64 = hexToBase64(key);\n\n\t\t// Generate actual password (based on encrypted password), using the given criteria\n\t\tvar typeCount = 0;\n\t\tif (options.smallLetters)\n\t\t\ttypeCount++;\n\t\tif (options.capitalLetters)\n\t\t\ttypeCount++;\n\t\tif (options.numbers)\n\t\t\ttypeCount++;\n\t\tif (options.specialChars)\n\t\t\ttypeCount++;\n\n\t\tvar prefix = \"\";\n\t\tvar newPassword = \"\";\n\t\tvar specialCharsListStart = salt.length % options.specialCharList.length;\n\n\t\tvar smallLettersAdded = false;\n\t\tvar capitalLettersAdded = false;\n\t\tvar numbersAdded = false;\n\t\tvar specialCharsAdded = false;\n\t\tvar charAdded = false;\n\n\t\tfor (var i = 0; i < base64.length; i++) {\n\t\t\tvar curChar = base64.charAt(i);\n\t\t\tvar charCode = curChar.charCodeAt();\n\n\t\t\tcharAdded = false;\n\n\n\t\t\tif (typeCount > 0) {\n\t\t\t\t// Generate prefix, containing one of each\n\t\t\t\tif (options.smallLetters && !smallLettersAdded && charCode >= 97\n\t\t\t\t\t\t&& charCode <= 122) {\n\t\t\t\t\tprefix += curChar;\n\t\t\t\t\tsmallLettersAdded = true;\n\t\t\t\t\ttypeCount--;\n\t\t\t\t\tcharAdded = true;\n\t\t\t\t} else if (options.capitalLetters && !capitalLettersAdded && charCode >= 65\n\t\t\t\t\t\t&& charCode <= 90) {\n\t\t\t\t\tprefix += curChar;\n\t\t\t\t\tcapitalLettersAdded = true;\n\t\t\t\t\ttypeCount--;\n\t\t\t\t\tcharAdded = true;\n\t\t\t\t} else if (options.numbers && !numbersAdded && charCode >= 48\n\t\t\t\t\t\t&& charCode <= 57) {\n\t\t\t\t\tprefix += curChar;\n\t\t\t\t\tnumbersAdded = true;\n\t\t\t\t\ttypeCount--;\n\t\t\t\t\tcharAdded = true;\n\t\t\t\t} else if (options.specialChars && !specialCharsAdded\n\t\t\t\t\t\t&& (charCode == 43 || charCode == 47 || charCode == 61)) {\n\t\t\t\t\tprefix += options.specialCharList.charAt((specialCharsListStart + i)\n\t\t\t\t\t\t\t% options.specialCharList.length);\n\t\t\t\t\tspecialCharsAdded = true;\n\t\t\t\t\ttypeCount--;\n\t\t\t\t\tcharAdded = true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (!charAdded) {\n\t\t\t\tif (options.smallLetters && charCode >= 97 && charCode <= 122) {\n\t\t\t\t\tnewPassword += curChar;\n\t\t\t\t} else if (options.capitalLetters && charCode >= 65 && charCode <= 90) {\n\t\t\t\t\tnewPassword += curChar;\n\t\t\t\t} else if (options.numbers && charCode >= 48 && charCode <= 57) {\n\t\t\t\t\tnewPassword += curChar;\n\t\t\t\t} else if (options.specialChars\n\t\t\t\t\t\t&& (charCode == 43 || charCode == 47 || charCode == 61)) {\n\t\t\t\t\tnewPassword += options.specialCharList\n\t\t\t\t\t\t\t.charAt((specialCharsListStart + i)\n\t\t\t\t\t\t\t\t\t% options.specialCharList.length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeCount == 0 && prefix.length + newPassword.length >= options.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\tresultCallback((prefix + newPassword).substring(0, options.length));\n\n\t}\n\n\t/**\n\t * @deprecated old version, obsolete, use calculatePassword() instead\n\t */\n\tfunction calculatePasswordOld(originalPassword, url, length, smallLetters, capitalLetters, numbers, specialChars, specialCharList, resultCallback){\n\t\tif (originalPassword.trim() == '') {\n\t\t\t// Skip calculation for an empty password\n\t\t\treturn '';\n\t\t}\n\n\t\tvar domain = getDomain(url);\n\t\tvar salt = getBaseUrl(domain);\n\t\tvar saltedPassword = salt+originalPassword;\n\n\t\tvar newPassword = hex_sha1(saltedPassword);\n\t\tnewPassword = newPassword.substring(0,length);\n\n\t\tvar moduloSpecialChars = saltedPassword.length % (length - 3) + 3;\n\t\tvar moduloLargeChars = saltedPassword.length % 2 +2;\n\n\t\tvar specialCharsListStart = salt.length % specialCharList.length;\n\n\t\tif (!numbers){\n\t\t\tvar tempPassword = '';\n\t\t\tfor(i=0;i<newPassword.length; i++){\n\t\t\t\tif (!isNaN(newPassword.substring(i,i+1))){\n\t\t\t\t\ttempPassword += String.fromCharCode(97+parseInt(newPassword.charAt(i)));\n\t\t\t\t} else {\n\t\t\t\t\ttempPassword += newPassword.charAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewPassword = tempPassword;\n\t\t}\n\n\t\tif (!smallLetters){\n\t\t\tif (capitalLetters){\n\t\t\t\tnewPassword = newPassword.toUpperCase();\n\t\t\t} else if (numbers){\n\t\t\t\ttempPassword = '';\n\t\t\t\tfor(var i=0;i<newPassword.length; i++){\n\t\t\t\t\ttempPassword += newPassword.charCodeAt(i) % 10;\n\t\t\t\t}\n\t\t\t\tnewPassword = tempPassword;\n\t\t\t}\n\t\t}\n\t\tif (capitalLetters && smallLetters){\n\t\t\ttempPassword = '';\n\t\t\tvar c = 0;\n\t\t\tfor(var i=0;i<newPassword.length; i++){\n\t\t\t\tvar character = newPassword.charAt(i);\n\t\t\t\tif (isNaN(character)){\n\t\t\t\t\tif (c % moduloLargeChars == 0)\n\t\t\t\t\t\ttempPassword += character.toUpperCase();\n\t\t\t\t\telse\n\t\t\t\t\t\ttempPassword += character;\n\t\t\t\t\tc++;\n\t\t\t\t} else {\n\t\t\t\t\ttempPassword += character;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewPassword = tempPassword;\n\t\t}\n\n\t\tif (specialChars){\n\t\t\ttempPassword = '';\n\t\t\tfor(var i=0;i<newPassword.length; i++){\n\t\t\t\tif (i>0 && i % moduloSpecialChars == 0){\n\t\t\t\t\ttempPassword += specialCharList.charAt((specialCharsListStart*i)%specialCharList.length);\n\t\t\t\t} else {\n\t\t\t\t\ttempPassword += newPassword.charAt(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewPassword = tempPassword;\n\n\t\t}\n\n\t\tresultCallback(newPassword);\n\n\t}\n\n\tfunction randomHash() {\n\t\tvar out = sjcl.hash.sha256.hash(sjcl.random.randomWords(1)[0]);\n\t\treturn sjcl.codec.hex.fromBits(out);\n\t}\n\n\n\t/**\n   * Returns the base url from a given domain.\n\t * The base url is the domain name without the superdomain, e.g. for www.foobar.com it returns foobar.\n\t *\n\t * @param domain Domain to parse\n\t * @return base url of given domain\n\t *\n\t */\n\tfunction getBaseUrl(domain) {\n\n\t\tif (domain && domain !== '') {\n\n\t\t\tvar parts = domain.split('.').reverse();\n\t\t\tvar cnt = parts.length;\n\t\t\tif (cnt >= 3) {\n\t\t\t\t// see if the second level domain is a common SLD.\n\t\t\t\tif (parts[1].match(/^(com|edu|gov|net|mil|org|nom|co|name|info|biz)$/i)) {\n\t\t\t\t\treturn parts[2];\n\t\t\t\t} else {\n\t\t\t\t\treturn parts[1];\n\t\t\t\t}\n\t\t\t} else if (cnt >= 2) {\n\t\t\t\treturn parts[1];\n\t\t\t} else {\n\t\t\t\treturn domain;\n\t\t\t}\n\t\t}\n\n\t\treturn domain;\n\t}\n\n\t/**\n\t * Returns the domain name for a given url\n\t *\n\t * @param origUrl\toriginal url to be parsed\n\t * @return domain for given origUrl\n\t *\n\t */\n\tfunction getDomain(origUrl) {\n\t\tif (!origUrl)\n\t\t\treturn origUrl;\n\n\t\tvar parser = document.createElement('a');\n\n\t\tvar origUrlLower = origUrl.toLowerCase().replace('&nbsp;', '');\n\t\tvar url = origUrlLower;\n\n\t\tparser.href = url;\n\n\t\tif ((parser.host.indexOf('magic-key') >= 0 && origUrlLower.indexOf('magic-key') == -1)\n\t\t\t\t|| (parser.host.indexOf('localhost') >= 0 && origUrlLower.indexOf('localhost') == -1)) {\n\t\t\t// This is handled as a relative url, change it to an absolute one\n\t\t\turl = 'http://'+url;\n\t\t\tparser.href = url;\n\t\t}\n\n\t\treturn parser.hostname;\n\t}\n\n\t/**\n\t * Returns the default options used for the calculation of the password.$\n\t * @return Object containing the default options.\n\t */\n\tfunction getDefaultOptions() {\n\t\treturn {\n\t\t\tlength: 20,\n\t\t\tsmallLetters: true,\n\t\t\tcapitalLetters: true,\n\t\t\tnumbers: true,\n\t\t\tspecialChars: true,\n\t\t\tspecialCharList: '][?/<~#`!@$%^&*()+=}|:\";\\',>{',\n\t\t\titerations: 100,\n\t\t\tstatusCallback: undefined\n\t\t};\n\t}\n\n\n}());"],"sourceRoot":"/source/"}