{"version":3,"sources":["password_lib.js","sjcl.js","crypt/hex2base64.js","crypt/pbkdf2.js","crypt/sha1.js"],"names":["mypbkdf2","sjclPbkdf2Timeout","async","calculatePasswordSjclPbkdf2","originalPassword","url","options","trim","Promise","resolve","intOptions","getDefaultOptions","attrname","verbose","console","log","domain","getDomain","out","sjcl","hash","sha256","getBaseUrl","salt","codec","hex","fromBits","iterations","length","passwordSalt","utf8String","toBits","derivedKey","misc","pbkdf2","key","hasher","hmac","sha1","this","encrypt","apply","arguments","hexKey","calculatePasswordInternal","calculatePassword","reject","stop","PBKDF2","deriveKey","statusCallback","base64","hexToBase64","typeCount","prefix","smallLetters","capitalLetters","numbers","specialChars","newPassword","specialCharsListStart","specialCharList","smallLettersAdded","capitalLettersAdded","numbersAdded","specialCharsAdded","charAdded","i","curChar","charAt","charCode","charCodeAt","substring","calculatePasswordOld","resultCallback","saltedPassword","hex_sha1","moduloSpecialChars","moduloLargeChars","tempPassword","isNaN","String","fromCharCode","parseInt","toUpperCase","c","character","randomHash","random","randomWords","parts","cnt","split","reverse","match","origUrl","parser","origUrlLower","host","document","createElement","toLowerCase","replace","href","window","location","hostname","indexOf","undefined","passwordLib","D","E","F","G","H","tableStr","table","cipher","keyexchange","mode","exception","corrupt","a","toString","message","invalid","bug","notReady","t","b","d","e","f","g","k","l","n","p","r","h","s","q","v","w","x","m","u","A","K","hasOwnProperty","push","C","performance","now","addEntropy","Date","valueOf","y","z","concat","L","aes","B","O","slice","prototype","decrypt","bitArray","bitSlice","$","clamp","extract","Math","floor","getPartial","bitLength","ceil","partial","round","equal","pop","byteswapM","decodeURIComponent","escape","unescape","encodeURIComponent","substr","base32","X","BITS","BASE","REMAINING","base32hex","base64url","reset","update","finalize","blockSize","Y","Uint32Array","subarray","splice","pow","ccm","name","listenProgress","unListenProgress","fa","V","data","tag","na","ocb2","S","pmac","gcm","ka","j","W","R","mac","aa","digest","prng","P","N","U","Z","o","ha","M","progress","seeded","ga","I","J","ca","T","da","ba","isReady","setDefaultParanoia","Object","call","max","getProgress","startCollectors","loadTimeCollector","ma","mouseCollector","oa","keyboardCollector","la","accelerometerCollector","ea","touchCollector","qa","addEventListener","attachEvent","stopCollectors","removeEventListener","detachEvent","clientX","offsetX","clientY","offsetY","touches","changedTouches","pageX","pageY","accelerationIncludingGravity","orientation","module","exports","require","randomBytes","Uint8Array","buffer","crypto","getRandomValues","msCrypto","str","btoa","base64ToHex","bin","atob","tmp","join","password","num_iterations","num_bytes","m_result_func","m_status_func","m_bpassword","rstr2binb","m_salt","m_total_iterations","m_iterations_done","m_key_length","m_hash","m_total_blocks","m_current_block","m_ipad","Array","m_opad","m_buffer","m_key","m_this_object","m_stopped","binb_sha1","chrsz","status_callback","result_callback","setTimeout","do_PBKDF2_iterations","salt_block","rstr2hex","binb2rstr","json","defaults","iter","ks","ts","adata","ja","iv","cachedPbkdf2","ecc","elGamal","publicKey","kem","kemtag","ct","arrayBuffer","ArrayBuffer","encode","ia","secretKey","unkem","raw","decode","sa","ra","pa","firstSalt","define","test","Error","len","hexcase","b64pad","rstr_sha1","str2rstr_utf8","b64_sha1","rstr2b64","any_sha1","rstr2any","hex_hmac_sha1","rstr_hmac_sha1","b64_hmac_sha1","any_hmac_sha1","sha1_vm_test","bkey","ipad","opad","input","hex_tab","output","triplet","encoding","quotient","divisor","remainders","dividend","full_length","str2rstr_utf16le","str2rstr_utf16be","olda","oldb","oldc","oldd","olde","bit_rol","safe_add","sha1_ft","sha1_kt","lsw","num"],"mappings":"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","file":"page-specific-password-gen.min.js","sourcesContent":["var mypbkdf2 = null;\nvar sjclPbkdf2Timeout = null;\n\n\n\"use strict\";\n\nexport async function calculatePasswordSjclPbkdf2(originalPassword, url, options) {\n\n\tif (originalPassword.trim() === '') {\n\t\t// Skip calculation for an empty password\n\t\treturn Promise.resolve('');\n\t}\n\n\tvar resolve = () => {\n\t\tvar intOptions = getDefaultOptions();\n\n\t\tif (typeof options !== 'undefined') {\n\t\t\t// Merge the options\n\t\t\tfor (var attrname in options) {\n\t\t\t\tintOptions[attrname] = options[attrname];\n\t\t\t}\n\t\t}\n\n\t\tif (options.verbose)\n\t\t\tconsole.log('calculatePassword', 'url:', url, 'options:', intOptions);\n\n\t\tvar domain = getDomain(url);\n\n\t\tvar out = sjcl.hash.sha256.hash(getBaseUrl(domain));\n\t\tvar salt = sjcl.codec.hex.fromBits(out);\n\t\tif (options.salt) {\n\t\t\tsalt = options.salt + salt;\n\t\t}\n\n\t\tif (options.verbose)\n\t\t\tconsole.log('calculatePassword, salt:', salt);\n\n\t\t// Encrypt password using the original password and the given salt value\n\t\tvar iterations = intOptions.iterations + (salt.length + originalPassword.length + 1);\n\n\n\t\tvar hmacSHA1 = function (key) {\n\t\t\tvar hasher = new sjcl.misc.hmac(key, sjcl.hash.sha1);\n\t\t\tthis.encrypt = function () {\n\t\t\t\treturn hasher.encrypt.apply(hasher, arguments);\n\t\t\t};\n\t\t};\n\n\t\tvar passwordSalt = sjcl.codec.utf8String.toBits(salt);\n\t\toriginalPassword = sjcl.codec.hex.toBits(originalPassword);\n\t\tvar derivedKey = sjcl.misc.pbkdf2(originalPassword, passwordSalt, iterations, 512, hmacSHA1);\n\t\tvar hexKey = sjcl.codec.hex.fromBits(derivedKey);\n\t\tconsole.log('calculated');\n\t\treturn calculatePasswordInternal(hexKey, salt, intOptions);\n\n\n\t};\n\n\treturn Promise.resolve(resolve());\n\n}\n\n\nexport function calculatePassword(originalPassword, url, options) {\n\treturn new Promise(function (resolve, reject) {\n\t\tvar intOptions = getDefaultOptions();\n\n\t\tif (typeof options !== 'undefined') {\n\t\t\t// Merge the options\n\t\t\tfor (var attrname in options) {\n\t\t\t\tintOptions[attrname] = options[attrname];\n\t\t\t}\n\t\t}\n\n\t\tif (options.verbose)\n\t\t\tconsole.log('calculatePassword', 'url:', url, 'options:', intOptions);\n\n\n\t\tif (originalPassword.trim() == '') {\n\t\t\t// Skip calculation for an empty password\n\t\t\tresolve('');\n\t\t\treturn;\n\t\t}\n\n\t\tvar domain = getDomain(url);\n\t\tvar salt = getBaseUrl(domain);\n\n\t\tif (options.verbose)\n\t\t\tconsole.log('calculatePassword, salt:', salt);\n\n\t\t// Encrypt password using the original password and the given salt value\n\t\tvar iterations = intOptions.iterations + (salt.length + originalPassword.length + 1);\n\n\t\tif (mypbkdf2 != null)\n\t\t\tmypbkdf2.stop();\n\n\t\tmypbkdf2 = new PBKDF2(originalPassword, salt, iterations, 128);\n\n\t\tvar intResultCallback = function (key) {\n\t\t\tresolve(calculatePasswordInternal(key, salt, intOptions));\n\t\t};\n\t\tmypbkdf2.deriveKey(options.statusCallback, intResultCallback);\n\n\t});\n\n}\n\nexport function calculatePasswordInternal(key, salt, options) {\n\tvar base64 = hexToBase64(key);\n\n\t// Generate actual password (based on encrypted password), using the given criteria\n\tvar typeCount = 0;\n\tif (options.smallLetters)\n\t\ttypeCount++;\n\tif (options.capitalLetters)\n\t\ttypeCount++;\n\tif (options.numbers)\n\t\ttypeCount++;\n\tif (options.specialChars)\n\t\ttypeCount++;\n\n\tvar prefix = \"\";\n\tvar newPassword = \"\";\n\tvar specialCharsListStart = salt.length % options.specialCharList.length;\n\n\tvar smallLettersAdded = false;\n\tvar capitalLettersAdded = false;\n\tvar numbersAdded = false;\n\tvar specialCharsAdded = false;\n\tvar charAdded = false;\n\n\tfor (var i = 0; i < base64.length; i++) {\n\t\tvar curChar = base64.charAt(i);\n\t\tvar charCode = curChar.charCodeAt();\n\n\t\tcharAdded = false;\n\n\n\t\tif (typeCount > 0) {\n\t\t\t// Generate prefix, containing one of each\n\t\t\tif (options.smallLetters && !smallLettersAdded && charCode >= 97\n\t\t\t\t&& charCode <= 122) {\n\t\t\t\tprefix += curChar;\n\t\t\t\tsmallLettersAdded = true;\n\t\t\t\ttypeCount--;\n\t\t\t\tcharAdded = true;\n\t\t\t} else if (options.capitalLetters && !capitalLettersAdded && charCode >= 65\n\t\t\t\t&& charCode <= 90) {\n\t\t\t\tprefix += curChar;\n\t\t\t\tcapitalLettersAdded = true;\n\t\t\t\ttypeCount--;\n\t\t\t\tcharAdded = true;\n\t\t\t} else if (options.numbers && !numbersAdded && charCode >= 48\n\t\t\t\t&& charCode <= 57) {\n\t\t\t\tprefix += curChar;\n\t\t\t\tnumbersAdded = true;\n\t\t\t\ttypeCount--;\n\t\t\t\tcharAdded = true;\n\t\t\t} else if (options.specialChars && !specialCharsAdded\n\t\t\t\t&& (charCode == 43 || charCode == 47 || charCode == 61)) {\n\t\t\t\tprefix += options.specialCharList.charAt((specialCharsListStart + i)\n\t\t\t\t\t% options.specialCharList.length);\n\t\t\t\tspecialCharsAdded = true;\n\t\t\t\ttypeCount--;\n\t\t\t\tcharAdded = true;\n\t\t\t}\n\n\t\t}\n\n\t\tif (!charAdded) {\n\t\t\tif (options.smallLetters && charCode >= 97 && charCode <= 122) {\n\t\t\t\tnewPassword += curChar;\n\t\t\t} else if (options.capitalLetters && charCode >= 65 && charCode <= 90) {\n\t\t\t\tnewPassword += curChar;\n\t\t\t} else if (options.numbers && charCode >= 48 && charCode <= 57) {\n\t\t\t\tnewPassword += curChar;\n\t\t\t} else if (options.specialChars\n\t\t\t\t&& (charCode == 43 || charCode == 47 || charCode == 61)) {\n\t\t\t\tnewPassword += options.specialCharList\n\t\t\t\t\t.charAt((specialCharsListStart + i)\n\t\t\t\t\t\t% options.specialCharList.length);\n\t\t\t}\n\t\t}\n\n\t\tif (typeCount == 0 && prefix.length + newPassword.length >= options.length) {\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\treturn (prefix + newPassword).substring(0, options.length);\n\n}\n\n/**\n * @deprecated old version, obsolete, use calculatePassword() instead\n */\nexport function calculatePasswordOld(originalPassword, url, length, smallLetters, capitalLetters, numbers, specialChars, specialCharList, resultCallback) {\n\tif (originalPassword.trim() == '') {\n\t\t// Skip calculation for an empty password\n\t\treturn '';\n\t}\n\n\tvar domain = getDomain(url);\n\tvar salt = getBaseUrl(domain);\n\tvar saltedPassword = salt + originalPassword;\n\n\tvar newPassword = hex_sha1(saltedPassword);\n\tnewPassword = newPassword.substring(0, length);\n\n\tvar moduloSpecialChars = saltedPassword.length % (length - 3) + 3;\n\tvar moduloLargeChars = saltedPassword.length % 2 + 2;\n\n\tvar specialCharsListStart = salt.length % specialCharList.length;\n\n\tif (!numbers) {\n\t\tvar tempPassword = '';\n\t\tfor (i = 0; i < newPassword.length; i++) {\n\t\t\tif (!isNaN(newPassword.substring(i, i + 1))) {\n\t\t\t\ttempPassword += String.fromCharCode(97 + parseInt(newPassword.charAt(i)));\n\t\t\t} else {\n\t\t\t\ttempPassword += newPassword.charAt(i);\n\t\t\t}\n\t\t}\n\t\tnewPassword = tempPassword;\n\t}\n\n\tif (!smallLetters) {\n\t\tif (capitalLetters) {\n\t\t\tnewPassword = newPassword.toUpperCase();\n\t\t} else if (numbers) {\n\t\t\ttempPassword = '';\n\t\t\tfor (var i = 0; i < newPassword.length; i++) {\n\t\t\t\ttempPassword += newPassword.charCodeAt(i) % 10;\n\t\t\t}\n\t\t\tnewPassword = tempPassword;\n\t\t}\n\t}\n\tif (capitalLetters && smallLetters) {\n\t\ttempPassword = '';\n\t\tvar c = 0;\n\t\tfor (var i = 0; i < newPassword.length; i++) {\n\t\t\tvar character = newPassword.charAt(i);\n\t\t\tif (isNaN(character)) {\n\t\t\t\tif (c % moduloLargeChars == 0)\n\t\t\t\t\ttempPassword += character.toUpperCase();\n\t\t\t\telse\n\t\t\t\t\ttempPassword += character;\n\t\t\t\tc++;\n\t\t\t} else {\n\t\t\t\ttempPassword += character;\n\t\t\t}\n\t\t}\n\t\tnewPassword = tempPassword;\n\t}\n\n\tif (specialChars) {\n\t\ttempPassword = '';\n\t\tfor (var i = 0; i < newPassword.length; i++) {\n\t\t\tif (i > 0 && i % moduloSpecialChars == 0) {\n\t\t\t\ttempPassword += specialCharList.charAt((specialCharsListStart * i) % specialCharList.length);\n\t\t\t} else {\n\t\t\t\ttempPassword += newPassword.charAt(i);\n\t\t\t}\n\t\t}\n\t\tnewPassword = tempPassword;\n\n\t}\n\n\tresultCallback(newPassword);\n\n}\n\nexport function randomHash() {\n\tvar out = sjcl.hash.sha256.hash(sjcl.random.randomWords(1)[0]);\n\treturn sjcl.codec.hex.fromBits(out);\n}\n\n\n/**\n* Returns the base url from a given domain.\n * The base url is the domain name without the superdomain, e.g. for www.foobar.com it returns foobar.\n *\n * @param domain Domain to parse\n * @return base url of given domain\n *\n */\nexport function getBaseUrl(domain) {\n\n\tif (domain && domain !== '') {\n\n\t\tvar parts = domain.split('.').reverse();\n\t\tvar cnt = parts.length;\n\t\tif (cnt >= 3) {\n\t\t\t// see if the second level domain is a common SLD.\n\t\t\tif (parts[1].match(/^(com|edu|gov|net|mil|org|nom|co|name|info|biz)$/i)) {\n\t\t\t\treturn parts[2];\n\t\t\t} else {\n\t\t\t\treturn parts[1];\n\t\t\t}\n\t\t} else if (cnt >= 2) {\n\t\t\treturn parts[1];\n\t\t} else {\n\t\t\treturn domain;\n\t\t}\n\t}\n\n\treturn domain;\n}\n\n/**\n * Returns the domain name for a given url\n *\n * @param origUrl\toriginal url to be parsed\n * @return domain for given origUrl\n *\n */\nexport function getDomain(origUrl) {\n\tif (!origUrl)\n\t\treturn origUrl;\n\n\tvar parser = document.createElement('a');\n\n\tvar origUrlLower = origUrl.toLowerCase().replace('&nbsp;', '');\n\tvar url = origUrlLower;\n\n\tparser.href = url;\n\n\tvar host = window.location.hostname;\n\tif ((parser.host.indexOf(host) >= 0 && origUrlLower.indexOf(host) == -1)) {\n\t\t// This is handled as a relative url, change it to an absolute one\n\t\turl = 'http://' + url;\n\t\tparser.href = url;\n\t}\n\n\treturn parser.hostname;\n}\n\n/**\n * Returns the default options used for the calculation of the password.$\n * @return Object containing the default options.\n */\nexport const getDefaultOptions = () => {\n\treturn {\n\t\tlength: 20,\n\t\tsmallLetters: true,\n\t\tcapitalLetters: true,\n\t\tnumbers: true,\n\t\tspecialChars: true,\n\t\tspecialCharList: '][?/<~#`!@$%^&*()+=}|:\";\\',>{',\n\t\titerations: 100,\n\t\tstatusCallback: undefined\n\t};\n}\n\nexport const passwordLib = (function () {\n\treturn {\n\t\tcalculatePasswordSjclPbkdf2: calculatePasswordSjclPbkdf2,\n\t\tcalculatePassword: calculatePassword,\n\t\tcalculatePasswordOld: calculatePasswordOld,\n\t\trandomHash: randomHash,\n\t\tgetBaseUrl: getBaseUrl,\n\t\tgetDomain: getDomain,\n\t\tgetDefaultOptions: getDefaultOptions\n\t};\n\n}());","\"use strict\";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return\"CORRUPT: \"+this.message};this.message=a},invalid:function(a){this.toString=function(){return\"INVALID: \"+this.message};this.message=a},bug:function(a){this.toString=function(){return\"BUG: \"+this.message};this.message=a},notReady:function(a){this.toString=function(){return\"NOT READY: \"+this.message};this.message=a}}};\nsjcl.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl.exception.invalid(\"invalid aes key size\");this.b=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d[a]=d[a-b]^c}for(b=0;a;b++,a--)c=d[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&\n255]]};\nsjcl.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d=b[4],e,f,g,h=[],k=[],l,n,m,p;for(e=0;0x100>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d[m]=f,n=h[e=h[l=h[f]]],p=0x1010101*n^0x10001*e^0x101*l^0x1010100*f,n=0x101*h[m]^0x1010100*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8;for(e=\ne;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};\nfunction t(a,b,c){if(4!==b.length)throw new sjcl.exception.invalid(\"invalid aes block size\");var d=a.b[c],e=b[0]^d[0],f=b[c?3:1]^d[1],g=b[2]^d[2];b=b[c?1:3]^d[3];var h,k,l,n=d.length/4-2,m,p=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v=h[2],w=h[3],x=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v[g>>8&255]^w[b&255]^d[p],k=a[f>>>24]^q[g>>16&255]^v[b>>8&255]^w[e&255]^d[p+1],l=a[g>>>24]^q[b>>16&255]^v[e>>8&255]^w[f&255]^d[p+2],b=a[b>>>24]^q[e>>16&255]^v[f>>8&255]^w[g&255]^d[p+3],p+=4,e=h,f=k,g=l;for(m=\nm;m++)r[c?3&-m:m]=x[e>>>24]<<24^x[f>>16&255]<<16^x[g>>8&255]<<8^x[b&255]^d[p++],h=e,e=f,f=g,g=b,b=h;return r}\nsjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return 32===d?a.concat(b):sjcl.bitArray.$(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===\nb?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+0x10000000000*a},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return!1;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return 0===\n  c},$:function(a,b,c,d){var e;e=0;for(void 0===d&&(d=[]);32<=b;b-=32)d.push(c),c=0;if(0===b)return d.concat(a);for(e=0;e<a.length;e++)d.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d.pop(),1));return d},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&0xff00|(c&0xff00)<<8|c<<24;return a}};\nsjcl.codec.utf8String={fromBits:function(a){var b=\"\",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++)0===(d&3)&&(e=a[d/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++)d=d<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d),d=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};\nsjcl.codec.hex={fromBits:function(a){var b=\"\",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\\s|0x/g,\"\");d=a.length;a=a+\"00000000\";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d)}};\nsjcl.codec.base32={B:\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",X:\"0123456789ABCDEFGHIJKLMNOPQRSTUV\",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=\"\",g=0,h=sjcl.codec.base32.B,k=0,l=sjcl.bitArray.bitLength(a);c&&(h=sjcl.codec.base32.X);for(c=0;f.length*d<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d?(k=a[c]<<d-g,g+=e,c++):(k<<=d,g-=d);for(;f.length&7&&!b;)f+=\"=\";return f},toBits:function(a,b){a=a.replace(/\\s|=/g,\"\").toUpperCase();var c=sjcl.codec.base32.BITS,\n  d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=[],g,h=0,k=sjcl.codec.base32.B,l=0,n,m=\"base32\";b&&(k=sjcl.codec.base32.X,m=\"base32hex\");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl.codec.base32hex.toBits(a)}catch(p){}throw new sjcl.exception.invalid(\"this isn't \"+m+\"!\");}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d,l^=n<<c-h)}h&56&&f.push(sjcl.bitArray.partial(h&56,l,1));return f}};\nsjcl.codec.base32hex={fromBits:function(a,b){return sjcl.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl.codec.base32.toBits(a,1)}};\nsjcl.codec.base64={B:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",fromBits:function(a,b,c){var d=\"\",e=0,f=sjcl.codec.base64.B,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+\"-_\");for(c=0;6*d.length<h;)d+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d.length&3&&!b;)d+=\"=\";return d},toBits:function(a,b){a=a.replace(/\\s|=/g,\"\");var c=[],d,e=0,f=sjcl.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+\"-_\");for(d=0;d<a.length;d++){h=f.indexOf(a.charAt(d));\n  if(0>h)throw new sjcl.exception.invalid(\"this isn't base64!\");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize()};\nsjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){\"string\"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.A=sjcl.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl.bitArray.bitLength(a);if(0x1fffffffffffff<a)throw new sjcl.exception.invalid(\"Cannot hash more than 2^53 - 1 bits\");if(\"undefined\"!==typeof Uint32Array){var d=new Uint32Array(c),e=0;for(b=512+b-(512+b&0x1ff);b<=a;b+=512)u(this,d.subarray(16*e,\n  16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&0x1ff);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/0x100000000));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a){return 0x100000000*(a-Math.floor(a))|0}for(var b=0,c=2,d,e;64>b;c++){e=!0;for(d=2;d*d<=c;d++)if(0===c%d){e=\n  !1;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};\nfunction u(a,b){var c,d,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d=b[c]:(d=b[c+1&15],e=b[c+14&15],d=b[c&15]=(d>>>7^d>>>18^d>>>3^d<<25^d<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d=d+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p^r))+g[c],q=r,r=p,p=m,m=n+d|0,n=l,l=k,k=h,h=d+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p|0;f[6]=f[6]+r|0;f[7]=\n  f[7]+q|0}\nsjcl.mode.ccm={name:\"ccm\",G:[],listenProgress:function(a){sjcl.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl.mode.ccm.G.indexOf(a);-1<a&&sjcl.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d=d||[];if(7>k)throw new sjcl.exception.invalid(\"ccm: iv must be at least 7 bytes\");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,\n  8*(15-f));b=sjcl.mode.ccm.V(a,b,c,d,e,f);g=sjcl.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl.exception.invalid(\"ccm: iv must be at least 7 bytes\");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl.mode.ccm.C(a,k,c,l,e,b);a=sjcl.mode.ccm.V(a,k.data,c,d,e,b);if(!f.equal(k.tag,a))throw new sjcl.exception.corrupt(\"ccm: tag doesn't match\");\n  return k.data},na:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,k=h.i;d=[h.partial(8,(b.length?64:0)|d-2<<2|f-1)];d=h.concat(d,c);d[3]|=e;d=a.encrypt(d);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:0xffffffff>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d=a.encrypt(k(d,g.slice(b,b+4).concat([0,0,0])));return d},V:function(a,b,c,d,e,f){var g=sjcl.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl.exception.invalid(\"ccm: invalid tag length\");\n  if(0xffffffff<d.length||0xffffffff<b.length)throw new sjcl.exception.bug(\"ccm: can't deal with 4GiB or more data\");c=sjcl.mode.ccm.na(a,d,c,e,g.bitLength(b)/8,f);for(d=0;d<b.length;d+=4)c=a.encrypt(h(c,b.slice(d,d+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!k)return{tag:d,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl.mode.ccm.fa(g/\n  k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d,data:h.clamp(b,l)}}};\nsjcl.mode.ocb2={name:\"ocb2\",encrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid(\"ocb iv must be 128 bits\");var g,h=sjcl.mode.ocb2.S,k=sjcl.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p=p.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));\n  d.length&&(n=l(n,f?d:sjcl.mode.ocb2.pmac(a,d)));return p.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid(\"ocb iv must be 128 bits\");e=e||64;var g=sjcl.mode.ocb2.S,h=sjcl.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p,r=sjcl.bitArray.bitLength(b)-e,q=[];d=d||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p=r-32*c;m=a.encrypt(k(n,[0,0,0,p]));m=k(m,h.clamp(b.slice(c),p).concat([0,\n  0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d.length&&(l=k(l,f?d:sjcl.mode.ocb2.pmac(a,d)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl.exception.corrupt(\"ocb: tag doesn't match\");return q.concat(h.clamp(m,p))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.S,e=sjcl.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4)h=d(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);\n  return a.encrypt(f(d(f(h,d(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};\nsjcl.mode.gcm={name:\"gcm\",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;d=d||[];a=sjcl.mode.gcm.C(!0,a,f,d,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.C(!1,a,f,d,c,e);if(!g.equal(a.tag,b))throw new sjcl.exception.corrupt(\"gcm: tag doesn't match\");return a.data},ka:function(a,b){var c,d,e,f,g,h=sjcl.bitArray.i;e=[0,0,\n  0,0];f=b.slice(0);for(c=0;128>c;c++){(d=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d=3;0<d;d--)f[d]=f[d]>>>1|(f[d-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-0x1f000000)}return e},j:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4)b[0]^=0xffffffff&c[d],b[1]^=0xffffffff&c[d+1],b[2]^=0xffffffff&c[d+2],b[3]^=0xffffffff&c[d+3],b=sjcl.mode.gcm.ka(b,a);return b},C:function(a,b,c,d,e,f){var g,h,k,l,n,m,p,r,q=sjcl.bitArray;m=c.length;p=q.bitLength(c);r=q.bitLength(d);h=q.bitLength(e);\n  g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl.mode.gcm.j(g,[0,0,0,0],e),e=sjcl.mode.gcm.j(g,e,[0,0,Math.floor(h/0x100000000),h&0xffffffff]));h=sjcl.mode.gcm.j(g,[0,0,0,0],d);n=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p);a&&(d=sjcl.mode.gcm.j(g,h,c));a=[Math.floor(r/0x100000000),r&0xffffffff,Math.floor(p/0x100000000),p&0xffffffff];d=sjcl.mode.gcm.j(g,d,a);k=b.encrypt(e);\n  d[0]^=k[0];d[1]^=k[1];d[2]^=k[2];d[3]^=k[3];return{tag:q.bitSlice(d,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.W=b=b||sjcl.hash.sha256;var c=[[],[]],d,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d=0;d<e;d++)c[0][d]=a[d]^909522486,c[1][d]=a[d]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};\nsjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=!1};sjcl.misc.hmac.prototype.update=function(a){this.aa=!0;this.R.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=(new this.W(this.w[1])).update(a).finalize();this.reset();return a};\nsjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1E4;if(0>d||0>c)throw new sjcl.exception.invalid(\"invalid params to pbkdf2\");\"string\"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));\"string\"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl.bitArray;for(k=1;32*l.length<(d||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d&&(l=n.clamp(l,d));return l};\nsjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=!1;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=0x10000;this.T=[0,48,64,96,128,192,0x100,384,512,768,1024];this.da=3E4;this.ba=80};\nsjcl.prng.prototype={randomWords:function(a,b){var c=[],d;d=this.isReady(b);var e;if(d===this.u)throw new sjcl.exception.notReady(\"generator isn't seeded\");if(d&this.J){d=!(d&this.I);e=[];var f=0,g;this.Z=e[0]=(new Date).valueOf()+this.da;for(g=0;16>g;g++)e.push(0x100000000*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=\n  f);this.P++;this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.L=new sjcl.cipher.aes(this.b);for(d=0;4>d&&(this.h[d]=this.h[d]+1|0,!this.h[d]);d++);}for(d=0;d<a;d+=4)0===(d+1)%this.ca&&y(this),e=z(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&\"Setting paranoia=0 will ruin your security; use it only for testing\"!==b)throw new sjcl.exception.invalid(\"Setting paranoia=0 will ruin your security; use it only for testing\");this.M=a},addEntropy:function(a,\nb,c){c=c||\"user\";var d,e,f=(new Date).valueOf(),g=this.H[c],h=this.isReady(),k=0;d=this.U[c];void 0===d&&(d=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case \"number\":void 0===b&&(b=1);this.c[g].update([d,this.N++,1,b,f,1,a|0]);break;case \"object\":c=Object.prototype.toString.call(a);if(\"[object Uint32Array]\"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for(\"[object Array]\"!==c&&(k=1),c=0;c<a.length&&!k;c++)\"number\"!==typeof a[c]&&\n(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d,this.N++,2,b,f,a.length].concat(a))}break;case \"string\":void 0===b&&(b=a.length);this.c[g].update([d,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A(\"seeded\",Math.max(this.o,this.f)),A(\"progress\",this.getProgress()))},\n  isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&(new Date).valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener(\"load\",\n    this.a.loadTimeCollector,!1),window.addEventListener(\"mousemove\",this.a.mouseCollector,!1),window.addEventListener(\"keypress\",this.a.keyboardCollector,!1),window.addEventListener(\"devicemotion\",this.a.accelerometerCollector,!1),window.addEventListener(\"touchmove\",this.a.touchCollector,!1);else if(document.attachEvent)document.attachEvent(\"onload\",this.a.loadTimeCollector),document.attachEvent(\"onmousemove\",this.a.mouseCollector),document.attachEvent(\"keypress\",this.a.keyboardCollector);else throw new sjcl.exception.bug(\"can't attach event\");\n    this.D=!0}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener(\"load\",this.a.loadTimeCollector,!1),window.removeEventListener(\"mousemove\",this.a.mouseCollector,!1),window.removeEventListener(\"keypress\",this.a.keyboardCollector,!1),window.removeEventListener(\"devicemotion\",this.a.accelerometerCollector,!1),window.removeEventListener(\"touchmove\",this.a.touchCollector,!1)):document.detachEvent&&(document.detachEvent(\"onload\",this.a.loadTimeCollector),document.detachEvent(\"onmousemove\",\n    this.a.mouseCollector),document.detachEvent(\"keypress\",this.a.keyboardCollector)),this.D=!1)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d,e=this.K[a],f=[];for(d in e)e.hasOwnProperty(d)&&e[d]===b&&f.push(d);for(c=0;c<f.length;c++)d=f[c],delete e[d]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,\"mouse\");C(this,0)},qa:function(a){a=\n    a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,\"touch\");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;\"number\"===typeof b&&this.addEntropy(b,1,\"accelerometer\")}a&&this.addEntropy(a,2,\"accelerometer\");C(this,0)}};\nfunction A(a,b){var c,d=sjcl.random.K[a],e=[];for(c in d)d.hasOwnProperty(c)&&e.push(d[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){\"undefined\"!==typeof window&&window.performance&&\"function\"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,\"loadtime\"):a.addEntropy((new Date).valueOf(),b,\"loadtime\")}function y(a){a.b=z(a).concat(z(a));a.L=new sjcl.cipher.aes(a.b)}function z(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}\nfunction B(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);\na:try{var D,E,F,G;if(G=\"undefined\"!==typeof module&&module.exports){var H;try{H=require(\"crypto\")}catch(a){H=null}G=E=H}if(G&&E.randomBytes)D=E.randomBytes(128),D=new Uint32Array((new Uint8Array(D)).buffer),sjcl.random.addEntropy(D,1024,\"crypto['randomBytes']\");else if(\"undefined\"!==typeof window&&\"undefined\"!==typeof Uint32Array){F=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F);\nelse break a;sjcl.random.addEntropy(F,1024,\"crypto['getRandomValues']\")}}catch(a){\"undefined\"!==typeof window&&window.console&&(console.log(\"There was an error collecting entropy from the browser:\"),console.log(a))}\nsjcl.json={defaults:{v:1,iter:1E4,ks:128,ts:64,mode:\"ccm\",adata:\"\",cipher:\"aes\"},ja:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.g({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;\"string\"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));\"string\"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||\"string\"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&0x100!==f.ks||2>f.iv.length||\n  4<f.iv.length)throw new sjcl.exception.invalid(\"json encrypt: invalid parameters\");\"string\"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));\"string\"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));\"string\"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.g(d,f);d.key=a;f.ct=\"ccm\"===f.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&\nb instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d){var e=sjcl.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.g(e.g(e.g({},e.defaults),b),c,!0);var f,g;f=b.adata;\"string\"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));\"string\"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||\"string\"===\n  typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&0x100!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl.exception.invalid(\"json decrypt: invalid parameters\");\"string\"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));\"string\"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f=\"ccm\"===\nb.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d,b);d.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d){var e=sjcl.json;return e.ia(a,e.decode(b),c,d)},encode:function(a){var b,c=\"{\",d=\"\";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid(\"json encode: invalid property name\");c+=d+'\"'+\n  b+'\":';d=\",\";switch(typeof a[b]){case \"number\":case \"boolean\":c+=a[b];break;case \"string\":c+='\"'+escape(a[b])+'\"';break;case \"object\":c+='\"'+sjcl.codec.base64.fromBits(a[b],0)+'\"';break;default:throw new sjcl.exception.bug(\"json encode: unsupported type\");}}return c+\"}\"},decode:function(a){a=a.replace(/\\s/g,\"\");if(!a.match(/^\\{.*\\}$/))throw new sjcl.exception.invalid(\"json decode: this isn't json!\");a=a.replace(/^\\{|\\}$/g,\"\").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^\\s*(?:([\"']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|\"([a-z0-9+\\/%*_.@=\\-]*)\"|(true|false))$/i)))throw new sjcl.exception.invalid(\"json decode: this isn't json!\");\n  null!=d[3]?b[d[2]]=parseInt(d[3],10):null!=d[4]?b[d[2]]=d[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]):null!=d[5]&&(b[d[2]]=\"true\"===d[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d in b)if(b.hasOwnProperty(d)){if(c&&void 0!==a[d]&&a[d]!==b[d])throw new sjcl.exception.invalid(\"required parameter overridden\");a[d]=b[d]}return a},sa:function(a,b){var c={},d;for(d in a)a.hasOwnProperty(d)&&a[d]!==b[d]&&(c[d]=a[d]);return c},ra:function(a,\nb){var c={},d;for(d=0;d<b.length;d++)void 0!==a[b[d]]&&(c[b[d]]=a[b[d]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.pa={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.pa,d;b=b||{};d=b.iter||1E3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=void 0===b.salt?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};\n\"undefined\"!==typeof module&&module.exports&&(module.exports=sjcl);\"function\"===typeof define&&define([],function(){return sjcl});","/*\n * Licence: cc by-sa 3.0 (https://creativecommons.org/licenses/by-sa/3.0)\n * Source: http://stackoverflow.com/questions/23190056/hex-to-base64-converter-for-javascript\n * Author: coder hacker (http://stackoverflow.com/users/2277510/coder-hacker)\n */\nif (!window.atob) {\n  var tableStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var table = tableStr.split(\"\");\n\n  window.atob = function (base64) {\n    if (/(=[^=]+|={3,})$/.test(base64)) throw new Error(\"String contains an invalid character\");\n    base64 = base64.replace(/=/g, \"\");\n    var n = base64.length & 3;\n    if (n === 1) throw new Error(\"String contains an invalid character\");\n    for (var i = 0, j = 0, len = base64.length / 4, bin = []; i < len; ++i) {\n      var a = tableStr.indexOf(base64[j++] || \"A\"), b = tableStr.indexOf(base64[j++] || \"A\");\n      var c = tableStr.indexOf(base64[j++] || \"A\"), d = tableStr.indexOf(base64[j++] || \"A\");\n      if ((a | b | c | d) < 0) throw new Error(\"String contains an invalid character\");\n      bin[bin.length] = ((a << 2) | (b >> 4)) & 255;\n      bin[bin.length] = ((b << 4) | (c >> 2)) & 255;\n      bin[bin.length] = ((c << 6) | d) & 255;\n    }\n    return String.fromCharCode.apply(null, bin).substr(0, bin.length + n - 4);\n  };\n\n  window.btoa = function (bin) {\n    for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {\n      var a = bin.charCodeAt(j++), b = bin.charCodeAt(j++), c = bin.charCodeAt(j++);\n      if ((a | b | c) > 255) throw new Error(\"String contains an invalid character\");\n      base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +\n                              (isNaN(b) ? \"=\" : table[((b << 2) & 63) | (c >> 6)]) +\n                              (isNaN(b + c) ? \"=\" : table[c & 63]);\n    }\n    return base64.join(\"\");\n  };\n\n}\n\nfunction hexToBase64(str) {\n  return btoa(String.fromCharCode.apply(null,\n    str.replace(/\\r|\\n/g, \"\").replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \").replace(/ +$/, \"\").split(\" \"))\n  );\n}\n\nfunction base64ToHex(str) {\n  for (var i = 0, bin = atob(str.replace(/[ \\r\\n]+$/, \"\")), hex = []; i < bin.length; ++i) {\n    var tmp = bin.charCodeAt(i).toString(16);\n    if (tmp.length === 1) tmp = \"0\" + tmp;\n    hex[hex.length] = tmp;\n  }\n  return hex.join(\" \");\n}\n\n","/*\n * JavaScript implementation of Password-Based Key Derivation Function 2\n * (PBKDF2) as defined in RFC 2898.\n * Version 1.5 \n * Copyright (c) 2007, 2008, 2009, 2010, 2011, 2012, 2013 Parvez Anandam\n * parvez@anandam.com\n * http://anandam.com/pbkdf2\n *\n * Distributed under the BSD license\n *\n * Uses Paul Johnston's excellent SHA-1 JavaScript library sha1.js:\n * http://pajhome.org.uk/crypt/md5/sha1.html\n * (uses the binb_sha1(), rstr2binb(), binb2str(), rstr2hex() functions from that libary)\n *\n * Thanks to Felix Gartsman for pointing out a bug in version 1.0\n * Thanks to Thijs Van der Schaeghe for pointing out a bug in version 1.1 \n * Thanks to Richard Gautier for asking to clarify dependencies in version 1.2\n * Updated contact information from version 1.3\n * Thanks to Stuart Heinrich for pointing out updates to PAJ's SHA-1 library in version 1.4\n */\n\n\n/*\n * The four arguments to the constructor of the PBKDF2 object are \n * the password, salt, number of iterations and number of bytes in\n * generated key. This follows the RFC 2898 definition: PBKDF2 (P, S, c, dkLen)\n *\n * The method deriveKey takes two parameters, both callback functions:\n * the first is used to provide status on the computation, the second\n * is called with the result of the computation (the generated key in hex).\n *\n * Example of use:\n *\n *    <script src=\"sha1.js\"></script>\n *    <script src=\"pbkdf2.js\"></script>\n *    <script>\n *    var mypbkdf2 = new PBKDF2(\"mypassword\", \"saltines\", 1000, 16);\n *    var status_callback = function(percent_done) {\n *        document.getElementById(\"status\").innerHTML = \"Computed \" + percent_done + \"%\"};\n *    var result_callback = function(key) {\n *        document.getElementById(\"status\").innerHTML = \"The derived key is: \" + key};\n *    mypbkdf2.deriveKey(status_callback, result_callback);\n *    </script>\n *    <div id=\"status\"></div>\n *\n */\n\nfunction PBKDF2(password, salt, num_iterations, num_bytes)\n{\n\t// Remember the password and salt\n\tvar m_bpassword = rstr2binb(password);\n\tvar m_salt = salt;\n\n\t// Total number of iterations\n\tvar m_total_iterations = num_iterations;\n\n\t// Run iterations in chunks instead of all at once, so as to not block.\n\t// Define size of chunk here; adjust for slower or faster machines if necessary.\n\tvar m_iterations_in_chunk = 10;\n\n\t// Iteration counter\n\tvar m_iterations_done = 0;\n\n\t// Key length, as number of bytes\n\tvar m_key_length = num_bytes;\n\n\t// The hash cache\n\tvar m_hash = null;\n\n\t// The length (number of bytes) of the output of the pseudo-random function.\n\t// Since HMAC-SHA1 is the standard, and what is used here, it's 20 bytes.\n\tvar m_hash_length = 20;\n\n\t// Number of hash-sized blocks in the derived key (called 'l' in RFC2898)\n\tvar m_total_blocks = Math.ceil(m_key_length/m_hash_length);\n\n\t// Start computation with the first block\n\tvar m_current_block = 1;\n\n\t// Used in the HMAC-SHA1 computations\n\tvar m_ipad = new Array(16);\n\tvar m_opad = new Array(16);\n\n\t// This is where the result of the iterations gets sotred\n\tvar m_buffer = [0x0,0x0,0x0,0x0,0x0];\n\t\n\t// The result\n\tvar m_key = \"\";\n\n\t// This object\n\tvar m_this_object = this;\n\n\t// The function to call with the result\n\tvar m_result_func;\n\n\t// The function to call with status after computing every chunk\n\tvar m_status_func;\n\t\n\tvar m_stopped = false;\n\t\n\t// Set up the HMAC-SHA1 computations\n\tif (m_bpassword.length > 16) m_bpassword = binb_sha1(m_bpassword, password.length * chrsz);\n\tfor(var i = 0; i < 16; ++i)\n\t{\n\t\tm_ipad[i] = m_bpassword[i] ^ 0x36363636;\n\t\tm_opad[i] = m_bpassword[i] ^ 0x5C5C5C5C;\n\t}\n\n\n\t// Starts the computation\n\tthis.deriveKey = function(status_callback, result_callback)\n\t{\n\t\tm_status_func = status_callback;\n\t\tm_result_func = result_callback;\n\t\tsetTimeout(function() { m_this_object.do_PBKDF2_iterations() }, 0);\n\t};\n\t\n\n\t// The workhorse\n\tthis.do_PBKDF2_iterations = function()\n\t{\n\t\tif (m_stopped) {\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\t\n\t\tvar iterations = m_iterations_in_chunk;\n\t\tif (m_total_iterations - m_iterations_done < m_iterations_in_chunk)\n\t\t\titerations = m_total_iterations - m_iterations_done;\n\t\t\t\n\t\tfor(var i=0; i<iterations; ++i)\n\t\t{\n\t\t\t// compute HMAC-SHA1 \n\t\t\tif (m_iterations_done == 0)\n\t\t\t{\n\t\t\t\tvar salt_block = m_salt +\n\t\t\t\t\t\tString.fromCharCode(m_current_block >> 24 & 0xF) +\n\t\t\t\t\t\tString.fromCharCode(m_current_block >> 16 & 0xF) +\n\t\t\t\t\t\tString.fromCharCode(m_current_block >>  8 & 0xF) +\n\t\t\t\t\t\tString.fromCharCode(m_current_block       & 0xF);\n\n\t\t\t\tm_hash = binb_sha1(m_ipad.concat(rstr2binb(salt_block)),\n\t\t\t\t\t\t\t\t   512 + salt_block.length * 8);\n\t\t\t\tm_hash = binb_sha1(m_opad.concat(m_hash), 512 + 160);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_hash = binb_sha1(m_ipad.concat(m_hash), \n\t\t\t\t\t\t\t\t   512 + m_hash.length * 32);\n\t\t\t\tm_hash = binb_sha1(m_opad.concat(m_hash), 512 + 160);\n\t\t\t}\n\n        \tfor(var j=0; j<m_hash.length; ++j)\n                \tm_buffer[j] ^= m_hash[j];\n\n\t\t\tm_iterations_done++;\n\t\t}\n\n\t\t// Call the status callback function\n\n\t\tif (m_iterations_done < m_total_iterations)\n\t\t{\n\t\t\tsetTimeout(function() { m_this_object.do_PBKDF2_iterations() }, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (m_current_block < m_total_blocks)\n\t\t\t{\n\t\t\t\t// Compute the next block (T_i in RFC 2898)\n\t\t\t\tif (m_status_func != null)\n\t\t\t\t\tm_status_func( (m_current_block - 1 + m_iterations_done/m_total_iterations) / m_total_blocks * 100);\n\t\t\t\t\n\t\t\t\tm_key += rstr2hex(binb2rstr(m_buffer));\n\t\t\t\n\t\t\t\tm_current_block++;\n\t\t\t\tm_buffer = [0x0,0x0,0x0,0x0,0x0];\n\t\t\t\tm_iterations_done = 0;\n\n\t\t\t\tsetTimeout(function() { m_this_object.do_PBKDF2_iterations() }, 0);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We've computed the final block T_l; we're done.\n\t\t\t\n\t\t\t\tvar tmp = rstr2hex(binb2rstr(m_buffer));\n\t\t\t\tm_key += tmp.substr(0, (m_key_length - (m_total_blocks - 1) * m_hash_length) * 2 );\n\t\t\t\t\n\t\t\t\t// Call the result callback function\n\t\t\t\tm_result_func(m_key);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tm_stopped = true;\n\t}\n}\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad  = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\nfunction hex_hmac_sha1(k, d)\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction b64_hmac_sha1(k, d)\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction any_hmac_sha1(k, d, e)\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction sha1_vm_test()\n{\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n\n/*\n * Calculate the SHA1 of a raw string\n */\nfunction rstr_sha1(s)\n{\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\nfunction rstr_hmac_sha1(key, data)\n{\n  var bkey = rstr2binb(key);\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n\n  var ipad = Array(16), opad = Array(16);\n  for(var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input)\n{\n  try { hexcase } catch(e) { hexcase=0; }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for(var i = 0; i < input.length; i++)\n  {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\n           +  hex_tab.charAt( x        & 0x0F);\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input)\n{\n  try { b64pad } catch(e) { b64pad=''; }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for(var i = 0; i < len; i += 3)\n  {\n    var triplet = (input.charCodeAt(i) << 16)\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\n    for(var j = 0; j < 4; j++)\n    {\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding)\n{\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for(i = 0; i < dividend.length; i++)\n  {\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */\n  while(dividend.length > 0)\n  {\n    quotient = Array();\n    x = 0;\n    for(i = 0; i < dividend.length; i++)\n    {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if(quotient.length > 0 || q > 0)\n        quotient[quotient.length] = q;\n    }\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for(i = remainders.length - 1; i >= 0; i--)\n    output += encoding.charAt(remainders[i]);\n\n  /* Append leading zero equivalents */\n  var full_length = Math.ceil(input.length * 8 /\n                                    (Math.log(encoding.length) / Math.log(2)));\n  for(i = output.length; i < full_length; i++)\n    output = encoding[0] + output;\n\n  return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input)\n{\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while(++i < input.length)\n  {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\n    {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if(x <= 0x7F)\n      output += String.fromCharCode(x);\n    else if(x <= 0x7FF)\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0xFFFF)\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0x1FFFFF)\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\n                                    0x80 | ((x >>> 12) & 0x3F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n  }\n  return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\n  return output;\n}\n\nfunction str2rstr_utf16be(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\n                                   input.charCodeAt(i)        & 0xFF);\n  return output;\n}\n\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binb(input)\n{\n  var output = Array(input.length >> 2);\n  for(var i = 0; i < output.length; i++)\n    output[i] = 0;\n  for(var i = 0; i < input.length * 8; i += 8)\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\n  return output;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2rstr(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length * 32; i += 8)\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\n  return output;\n}\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction binb_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for(var j = 0; j < 80; j++)\n    {\n      if(j < 16) w[j] = x[i + j];\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if(t < 20) return (b & c) | ((~b) & d);\n  if(t < 40) return b ^ c ^ d;\n  if(t < 60) return (b & c) | (b & d) | (c & d);\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}"]}